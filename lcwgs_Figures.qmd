---
title: "lcwgs figures"
author: "Arthur OulÃ¨s"
format: html
editor: source
---

# Load packages

```{r}
c("here", "tidyverse",
  "ncdf4", "rnaturalearth", "rnaturalearthdata", "rnaturalearthhires", "marmap",
  "patchwork", "plotly", "sf", "ggrepel", "ggspatial", "ggtree", "RColorBrewer", "viridis", 
  "scales", "ggnewscale", "terra", "tidyterra") |>
  lapply(library, character.only = TRUE)
```

# Load functions

```{r}
#| label: LoadPlot

source(here("functions", "lcwgs_tidy_functions.R"))
source(here("functions", "plot_functions.R"))
```

## Figure 1 - Manhattan plot home-made

```{r}
#| label: LoadMetadata

chromosome_names <- readRDS(file = here_d_lcwgs("manhattan_metadata.rds"))
```

### Plot every populations
```{r}
#| label: ManhattanPlot

pcadapt_lcwgs <- read_rds(file = here("output", "pcadapt_lcwgs.rds"))

manhattan_plot_lcwgs <- chromosome_names |>
  mutate(pvalues_all = Get_pvalues(pcadapt_lcwgs)) |>
  manhattan_plot_custom_2(pvalues = pvalues_all)
```

```{r}
#| label: SaveManhattanPlot

ggsave(
  here("output", "plots", "lcwgs", "manhattan_plot_custom_lcwgs.png"),
  plot   = manhattan_plot_lcwgs,
  width  = 6000,
  height = 2000,
  units = "px"
)

rm(pcadapt_lcwgs)
```

### Plot coastal populations
```{r}
#| label: ManhattanPlotCoast

pcadapt_lcwgs_coast <- read_rds(file = here("output", "pcadapt_lcwgs_coast.rds"))

manhattan_plot_lcwgs_coast <- chromosome_names |>
  mutate(pvalues_coast = Get_pvalues(pcadapt_lcwgs_coast)) |> 
  manhattan_plot_custom_2(pvalues = pvalues_coast)
```

```{r}
#| label: SaveManhattanPlotCoast

ggsave(
  here("output", "plots", "lcwgs", "manhattan_plot_custom_lcwgs_coast.png"),
  plot   = manhattan_plot_lcwgs_coast,
  width  = 6000,
  height = 2000,
  units = "px"
)
```

#### Descending chromosome length

```{r}
#| label: ManhattanPlotCoastDesc

chromosome_names_pvalues <- chromosome_names |> 
  mutate(pvalues_SD_SC = Get_pvalues(pcadapt_lcwgs_coast))

chromosome_length <- chromosome_names |>
  count(CHROM) |>
  arrange(desc(n))

chromosome_names_desc_order <- chromosome_names_pvalues |>
  mutate(CHROM = factor(CHROM, levels = chromosome_length$CHROM)) |>
  arrange(CHROM) |> 
  mutate(
    CHROM    = as.character(CHROM),
    # rank     = row_number(),
    coloured = CHROM |>
      {\(x) factor(x, levels = unique(x))}() |>
      as.integer() |>
      (`%%`)(2)
  )

rm(chromosome_names_pvalues)

manhattan_lcwgs_coast_descending <- manhattan_plot_custom_2(
  chromosome_names_desc_order,
  chromosome_names_desc_order$pvalues_SD_SC
)
```


```{r}
#| label: SaveManhattanPlotCoastDesc

ggsave(
  here("output", "plots", "lcwgs", "manhattan_plot_custom_lcwgs_arranged_coast.png"),
  plot   = manhattan_lcwgs_coast_descending,
  width  = 6000,
  height = 2000,
  units  = "px"
)
```


### Plot island populations
```{r}
#| label: ManhattanPlotIsl

pcadapt_lcwgs_islands <- read_rds(file = here("output", "pcadapt_lcwgs_islands.rds"))

manhattan_plot_lcwgs_islands <- chromosome_names |>
  mutate(pvalues_island = Get_pvalues(pcadapt_lcwgs_islands)) |>
  manhattan_plot_custom_2(pvalues = pvalues_island)
```

```{r}
#| label: SaveManhattanPlosIsl

ggsave(
  here("output", "plots", "lcwgs", "manhattan_plot_custom_lcwgs_islands.png"),
  plot   = manhattan_plot_lcwgs_islands,
  width  = 6000,
  height = 2000,
  units = "px"
)

rm(pcadapt_lcwgs_islands)
```

### Plot SD vs SCH

#### Regular
```{r}
#| label: ManhattanPlotSDSC

pcadapt_lcwgs_SD_SC <- read_rds(file = here("output", "pcadapt_lcwgs_SD_SC.rds"))

manhattan_plot_lcwgs_SD_SC <- chromosome_names |>
  mutate(pvalues_SD_SC = Get_pvalues(pcadapt_lcwgs_SD_SC)) |>
  manhattan_plot_custom_2(pvalues = pvalues_SD_SC)
```

```{r}
#| label: SaveManhattanPlotSDSC

ggsave(
  here("output", "plots", "lcwgs", "manhattan_plot_custom_lcwgs_SC_SD.png"),
  plot   = manhattan_plot_lcwgs_SD_SC,
  width  = 6000,
  height = 2000,
  units  = "px"
)
```

#### Descending chromosome length

```{r}
#| label: ManhattanPlotSDSCDesc

chromosome_names_pvalues <- chromosome_names |> 
  mutate(pvalues_SD_SC = Get_pvalues(pcadapt_lcwgs_SD_SC))

chromosome_length <- chromosome_names |>
  count(CHROM) |>
  arrange(desc(n))

chromosome_names_desc_order <- chromosome_names_pvalues |>
  mutate(CHROM = factor(CHROM, levels = chromosome_length$CHROM)) |>
  arrange(CHROM) |> 
  mutate(
    CHROM    = as.character(CHROM),
    rank     = row_number(),
    coloured = CHROM |>
      {\(x) factor(x, levels = unique(x))}() |>
      as.integer() |>
      (`%%`)(2)
  )

rm(chromosome_names_pvalues)

manhattan_lcwgs_SD_SC_descending <- manhattan_plot_custom_2(
  chromosome_names_desc_order,
  chromosome_names_desc_order$pvalues_SD_SC
)
```

```{r}
#| label: SaveManhattanPlotSDSCDesc

ggsave(
  here("output", "plots", "lcwgs", "manhattan_plot_custom_lcwgs_arranged_SC_SD.png"),
  plot   = manhattan_lcwgs_SD_SC_descending,
  width  = 6000,
  height = 2000,
  units  = "px"
)

rm(pcadapt_lcwgs_SD_SC)
```

### Clean memory

```{r}
#| label: ManhattanMemClean

rm(EJA_lcwgs_vcf, chromosome_names,
   manhattan_plot_lcwgs, manhattan_plot_lcwgs_coast, manhattan_plot_lcwgs_islands,
   manhattan_lcwgs_coast_descending, manhattan_lcwgs_SD_SC_descending)
```

## Figure 2 - PCA & map
### PCA plot
```{r}
#| label: LoadPCA

pcadapt_lcwgs <- read_rds(file = here("output", "pcadapt_lcwgs.rds"))

popmap_lcwgs <- c(
  rep("bodega_bay", 5), # BB
  rep("big_creek", 13), # BIGC -> BCR
  rep("catalina_island", 11), # CAT
  rep("elkhorn", 6), # ELK
  rep("guadalupe_island", 10), # GUA
  rep("pacific_grove", 13), # HOP -> Pacific Grove PGR 
  rep("isla_san_jeronimo", 11), # ISJ
  rep("laguna_beach", 13), # LB
  rep("point_dume", 5), # PD
  rep("santa_barbara_island", 13), # SB
  rep("san_clemente_island", 10), # SCL
  rep("la_jolla_san_diego", 13), # SD
  rep("tomales_bay", 1), # TB
  rep("redondo_beach", 10), # RB
  rep("santa_cruz_harbour", 10) # SCH
)
```

```{r}
#| label: PCAMapPCAPlot

PCA <- PCA_plot(pcadapt_output = pcadapt_lcwgs, popmap = popmap_lcwgs)

save_open_plot(
  path   = here("output", "plots", "lcwgs", "PCA.pdf"),
  plot   = PCA,
  width  = 9,
  height = 9
)
```

```{r}
#| label: PCAMapInteractivePlot

PCA_plot(
  pcadapt_output = pcadapt_lcwgs,
  popmap         = popmap_lcwgs,
  x_offsets      = rep(.01, 15),
  y_offsets      = rep(.05, 15)
) |>
  ggplotly()
```

```{r}
#| label: PCAMapPlotCrop

PCA_crop <- PCA + xlim(-.065, -.05) + ylim(.1125, .1275) +
  coord_fixed(ratio = 1) +
  theme(
    legend.position = "none",
    axis.title      = element_blank(),
    plot.background = element_rect(fill = "white", linetype = "longdash")
  )
PCA_crop$layers[[2]] <- NULL
```

```{r}
#| label: PCAMapPCAFuse

PCA_and_crop <- PCA + annotate(
  "rect",
  xmin  = -.07, xmax = -.04,
  ymin  = .1075, ymax = .1325,
  alpha = 0, colour = "black", linetype = "longdash"
) + 
theme(legend.position = "none") +
inset_element(PCA_crop, left = 0.6, bottom = 0.6, right = 1, top = 1)

save_open_plot(
  path   = here("output", "plots", "lcwgs", "pca_crop.pdf"),
  plot   = PCA_and_crop,
  width  = 9,
  height = 9
)
```

#### Interactive 3D PCA
```{r}
#| label: PCAMapPCAInteractive

TD_PCA_plot <- pcadapt_lcwgs$scores |>
  as_tibble() |>
  rename(PC_1 = V1, PC_2 = V2, PC_3 = V3, PC_4 = V4) |> 
  mutate(pop = popmap_lcwgs) |> 
  as.data.frame() |> 
  plot_ly(
    x = ~PC_1, y = ~PC_2, z = ~PC_3,
    color = ~pop, colors = viridis(144, option = "turbo")
  ) |>
  add_markers(size = 12)

setwd(here("output", "plots", "lcwgs"))
as_widget(TD_PCA_plot) |> saveWidget(
  file = here("output", "plots", "lcwgs", "3D_PCA.html"),
  selfcontained = TRUE)
setwd(here())

rm(TD_PCA_plot)
```

```{r}
#| label: PCAMemClean

rm(pcadapt_lcwgs, popmap_lcwgs,
   PCA, PCA_crop)
gc()
```

### Map - SST and current 
#### Formatting Copernicus data
```{r}
#| label: PCAMapMapFormatCurrents
#| eval: false

left_join(
  rast(
    x     = here("data", "Copernicus", "merged_uv",
                 "cmems_mod_glo_phy-cur_anfc_0.083deg_P1D-m_1721914334862.nc"),
    subds = "uo"
  ) |>
    mean() |> # Average on year
    aggregate(fact = 2, fun = "mean") |> # Lower resolution
    as.data.frame(xy = TRUE, na.rm = FALSE) |> 
    as_tibble() |> 
    rename(u_mean = mean),
  rast(
    x     = here("data", "Copernicus", "merged_uv",
                "cmems_mod_glo_phy-cur_anfc_0.083deg_P1D-m_1721914334862.nc"),
    subds = "vo"
  ) |>
    mean() |> # Average on year
    aggregate(fact = 2, fun = "mean") |> # Lower resolution
    as.data.frame(xy = TRUE, na.rm = FALSE) |> 
    as_tibble() |> 
    rename(v_mean = mean),
) |>
  write_rds(file = here("data", "Copernicus", "annual_average_currents_tb.RDS"))
```

```{r}
#| label: PCAMapMapFormatSST
#| eval: false

SST_maps <- here("data", "Copernicus", "SST_temperature_UKMO-L4_GHRSST") |> 
  list.files(full.names = TRUE) |>
  map(
    \(x) x |> 
      rast(lyrs = "analysed_sst", win = ext(-124,-113, 28.5, 38.5))
  ) |> 
  rast()

time(SST_maps) <- seq(as.Date("2023-01-01"), as.Date("2023-12-31"), by = "days")

SST_maps |>
  mean() |>
  (`-`)(273.15) |>
  saveRDS(file = here("data", "Copernicus", "annual_average_SST.rds"))

rm(SST_maps)
```

```{r}
#| label: PCAMapMapLoad

currents_tibble_annual_mean_lres <- read_rds(
  file = here("data", "Copernicus", "annual_average_currents_tb.RDS")
)

SST_annual_mean <- readRDS(
  file = here("data", "Copernicus", "annual_average_SST.RDS")
)
```

#### Landmass
```{r}
#| label: PCAMapMapMetadata

# Setting up landmass map from naturalearth
states <- ne_states(
  country     = c("united states of america", "mexico"),
  returnclass = "sf"
)

# Sampling site coordinates and misc info on map
sample_sites <- read.csv2(
    here("data","lcwgs", "low_coverage_sampling.csv"),
    stringsAsFactors = FALSE
  ) |>
  select(Longitude, Latitude, Sampling_sites) |> 
  mutate( # Add offsets
    Sampling_sites = gsub("\\n", "\n", Sampling_sites, fixed = TRUE),
    lab_lon = Longitude +
      c(1.0, .8,  .6, .62, .87,
        .73, .8, 1.1, .98,  -1,
        1.0, -1, .62,  .7, .79),
    lab_lat = Latitude +
      c(-.08, .22, .25,  .1, -.15,
         .10,  .2, .06,  .05,  .10,
        -.17, -.27,  .1, .15,  .25)
  )

states_labels <- data.frame(
  "long" = c(-117.5, -115.5, -113.7, -115.4),
  "lat"  = c(35.5, 37, 35, 30.75),
  "lab"  = c("CA", "NV", "AZ", "BC")
)
city_labels <- data.frame(
  "lat"      = c(37.773972, 34.448113),
  "long"     = c(-122.431297, -120.471439),
  "lat_lab"  = c(37.7, 34.8),
  "long_lab" = c(-122.28, -120.535),
  "lab"      = c("San Francisco", "Point\nConception")
)
ocean_labels <- data.frame(
  "long" = c(-121,-113.85),
  "lat"  = c(31,30.7),
  "lab"  = c("Pacific Ocean","Gulf\nof\nCalifornia")
)
```

#### Plot map
[Tutorial for surface temperature and current speed map](https://theoceancode.netlify.app/post/mapping_with_ggplot2/)

```{r}
#| label: PCAMapMapPlot

lcwgs_map <- ggplot() +
  # Temperature map
  geom_spatraster(data = SST_annual_mean, aes(fill = mean)) +
  # Temperature scale
  scale_fill_viridis(
    name = "Temp.\n (Â°C)",
    breaks = c(12.5, 15, 17.5, 20, 22.5),
    option = "turbo"
  ) +
  # Current vectors
  geom_segment(
    data     = currents_tibble_annual_mean_lres,
    mapping  = aes(
      x    = x,
      y    = y,
      xend = x + 2*u_mean,
      yend = y + 2*v_mean
    ),
    size     = .5,
    colour   = "#4d4d4d",
    arrow    = arrow(angle = 20, length = unit(0.035, "inches"), type = "closed"),
    linejoin = "mitre",
    na.rm    = TRUE
  ) +
  # Landmass
  geom_sf(data = states) +
  # Crop map
  coord_sf(xlim = c(-124, -113), ylim = c(28.5, 38.5), expand = FALSE) +
  # Sampling sites points and labels
  new_scale("fill") +
  geom_point(
    sample_sites,
    mapping     = aes(x    = Longitude,
                      y    = Latitude,
                      fill = Sampling_sites,
                      size = 1.3),
    shape       = 21,
    show.legend = FALSE
  ) +
  geom_label(
    sample_sites,
    mapping = aes(x = lab_lon, y = lab_lat, label = Sampling_sites),
    label.r = unit(0, "lines"),
    alpha   = .6
  ) +
  # Extra cities points and labels
  geom_point(
    city_labels,
    mapping     = aes(x = long, y = lat),
    size        = 4,
    shape       = 20,
    show.legend = FALSE
  ) +
  geom_text(
    city_labels,
    mapping    = aes(x = long_lab, y = lat_lab, label = lab),
    lineheight = .7,
    hjust      = 0
  ) +
  # Ocean and state names
  geom_text(
    states_labels,
    mapping = aes(x = long, y = lat, label = lab),
    size    = 5.5
  ) +
  geom_text(
    ocean_labels[2, ],
    mapping  = aes(x = long, y = lat, label = lab),
    colour   = "ivory",
    size     = 5,
    fontface = "bold"
  ) +
  geom_label(
    ocean_labels[1, ],
    mapping       = aes(x = long, y = lat, label = lab),
    colour        = "black",
    size          = 5,
    label.padding = unit(0.2, "lines"),
    label.r       = unit(0, "lines"),
    fontface      = "bold"
  ) +
  # Vector scale
  geom_label(
    aes(x = -122, y = 29.425, label = ".25 m/s\n"),
    size          = 4.5,
    label.padding = unit(0.5, "lines"),
    label.r       = unit(0, "lines")
  ) +
  geom_segment(
    aes(x = -122.25, y = 29.25, xend = -121.75, yend = 29.25),
    size     = .5,
    arrow    = arrow(
      angle  = 20,
      length = unit(0.035, "inches"),
      type   = "closed"
    ),
    linejoin = "mitre"
  ) +
  # Cartographic scale
  geom_label(
    aes(x = -119.14, y = 28.69, label = "        "),
    label.r = unit(0, "lines")
  ) +
  annotation_scale(location = "bl", width_hint = 0.4) +
  # Orientation
  annotation_north_arrow(
    location = "tr",
    style    = north_arrow_fancy_orienteering()
  ) +
  # Axes
  labs(x = "Longitude", y = "Latitude") +
  scale_x_continuous(
    breaks = c(-120, -115),
    labels = c("120Â°W", "115Â°W")
  ) +
  scale_y_continuous(
    breaks = c(30, 35),
    labels = unit_format(suffix = "Â°N", sep = "")
  )

save_open_plot(
  here("output", "plots", "lcwgs", "temp_current_map_lres.pdf"),
  plot   = lcwgs_map,
  width  = 9,
  height = 9
)
```

### Memory cleanup
```{r}
#| label: PCAMapMapMemClean

rm(currents_tibble_annual_mean_lres, SST_annual_mean,
   states,
   sample_sites, states_labels, city_labels, ocean_labels,
   current_uv_scalar)
gc()
```

### Fuse PCA plot and map
```{r}
#| label: PCAMapFuse

PCA_map <- PCA_and_crop + lcwgs_map +
  plot_annotation(tag_levels = list(c("A", "", "B"))) &
  theme(
    text      = element_text(size = 14),
    axis.text = element_text(size = 12),
    plot.tag  = element_text(face = "bold")
    )

save_open_plot(
  here("output", "plots", "lcwgs", "pca_map.png"),
  plot   = PCA_map,
  width  = 17.5,
  height = 11.25
)
```

```{r}
#| label: PCAMapMemClean

rm(PCA_map, PCA_and_crop, lcwgs_map)
gc()
```

## Figure 5 - Admixture plot
Change individuals order in the file `Individuals_plot_order.txt`
```{r}
#| label: AdmPlot

Indiv_list <- read_rds(file = here_d_lcwgs("Individual_list.rds"))

admixture_plot <- read_table(
  here_d_lcwgs("8-Embiotoca_filtered.snmf", "K6", "run65",
       "8-Embiotoca_filtered_r65.6.Q"),
  col_names = paste0("Pop ", seq(1, 6))
) |> 
  mutate(Individuals = Indiv_list |> unique()) |> 
  relocate(Individuals) |> 
  pivot_longer(
    -c(Individuals),
    names_to  = "Populations",
    values_to = "Ancestry proportions"
  ) |> 
  ggplot(
    aes(
      x    = factor(
        Individuals,
        levels = here_d_lcwgs("Individuals_plot_order.txt") |> 
          read.table() |>
          unlist() |>
          as.vector() 
      ),
      y    = `Ancestry proportions`,
      fill = Populations
    )
  ) +
  geom_col(position = "stack", width = 1) +
  scale_fill_viridis(discrete = TRUE, option = "turbo") +
  labs(x = "Individuals") +
  theme_minimal() +
  theme(
    axis.text.x = element_text(size = 8, angle = 90, vjust = 0.5, hjust = 1)
  )

save_open_plot(
  path   = here("output", "plots", "lcwgs", "admixture_plot_K=6.pdf"),
  plot   = admixture_plot,
  width  = 16,
  height = 6
  )

rm(Indiv_list, admixture_plot)
```

## Figure 6 - IBD
