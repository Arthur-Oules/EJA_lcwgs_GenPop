---
title: "lcwgs figures"
author: "Arthur OulÃ¨s"
format: html
editor: source
---

# Load packages

```{r}
c("here", "tidyverse",
  "ncdf4", "rnaturalearth", "rnaturalearthdata", "rnaturalearthhires", "marmap",
  "patchwork", "plotly", "sf", "ggrepel", "ggspatial", "ggtree", "RColorBrewer", "viridis", 
  "scales", "ggnewscale", "terra", "tidyterra", "tess3r") |>
  lapply(library, character.only = TRUE) |> invisible()
```

# Load functions

```{r}
#| label: LoadPlot

source(here("functions", "lcwgs_tidy_functions.R"))
source(here("functions", "plot_functions.R"))
```

## Figure 1 - Manhattan plot home-made

### Load Metadata

```{r}
#| label: LoadMetadata

SNP_positions <- readRDS(file = here("data", "SNP_positions.rds"))

chromosome_map <- here("data", "JAKOON01_catalog", "sequence_report.tsv") |> 
  read_tsv() |> 
  select(`GenBank seq accession`, `Sequence name`, `Seq length`) |> 
  filter(
    `GenBank seq accession` %in% (SNP_positions |> distinct(CHROM) |> pull(CHROM))
  ) |> 
  add_row(
    `GenBank seq accession` = "JAKOON010000230.1",
    `Sequence name`         = NA,
    `Seq length`            = NA
  )
```

### Individual plot example

```{r}
#| label: ManhattanPlot

manhattan_plot_lcwgs_K9 <- here("output", "pcadapt_lcwgs_K9.rds") |>
  read_rds() |> 
  manhattan_plot_custom_2(
    SNP_positions   = SNP_positions,
    chromosome_map  = chromosome_map
  )

ggsave(
  here("output", "plots", "manhattan_plot_custom_lcwgsK9.png"),
  plot   = manhattan_plot_lcwgs_K9,
  width  = 30000,
  height = 2000,
  units  = "px",
  limitsize = FALSE
)
```

#### With outliers

```{r}
#| label: ManhattanPlot

manhattan_plot_lcwgs_gua_isj_outliers <- manhattan_plot_custom_2(
  pcadapt            = here("output", "pcadapt_lcwgs_gua_isj.rds") |> read_rds(),
  SNP_positions      = SNP_positions,
  chromosome_map     = chromosome_map,
  outliers_positions = here("output", "pcadapt_lcwgs_gua_isj.rds") |>
    read_rds() |> 
    Get_outliers(pvalue_threshold = 0.05) |> 
    select(CHROM, POS)
)

ggsave(
  here("output", "plots", "manhattan_new", "outliers",
       "manhattan_plot_custom_lcwgs_gua_isj_outliers.png"),
  plot   = manhattan_plot_lcwgs_gua_isj_outliers,
  width  = 6000,
  height = 2000,
  units  = "px"
)

# manhattan_plot_lcwgs_K9_outliers_crop <- manhattan_plot_lcwgs_K9_outliers + coord_cartesian(ylim = c(-1, 200))
```

#### With outliers and match

```{r}
manhattan_plot_lcwgs_gua_isj_outliers_match <- manhattan_plot_custom_2(
  pcadapt            = here("output", "pcadapt_lcwgs_gua_isj.rds") |>
    read_rds(),
  SNP_positions      = SNP_positions,
  chromosome_map     = chromosome_map,
  outliers_positions = here("output", "pcadapt_lcwgs_gua_isj.rds") |>
    read_rds() |> 
    Get_outliers(pvalue_threshold = 0.05) |> 
    select(CHROM, POS),
  outliers_match     = here("output", "EJA_lcwgs_gua_isj_5E-2_outliers_annotations.csv") |> 
    read_csv2() |>
    distinct(`GenBank seq accession`, POS) |> 
    rename("CHROM" = `GenBank seq accession`)
)

ggsave(
  here("output", "plots", "manhattan_new", "match",
       "manhattan_plot_custom_lcwgs_gua_isj_outliers_match.png"),
  plot   = manhattan_plot_lcwgs_gua_isj_outliers_match,
  width  = 6000,
  height = 2000,
  units  = "px"
)
```

### Generate all plots from pcadapt analyses

```{r}
#| label: PlotsGen

manhattans <- tibble(
  read_files = list.files(here("output")) |> str_subset("pcadapt")
) |> 
  mutate(
    plots       = here("output", read_files) |>
      map(
        \(x) manhattan_plot_custom_2(
          read_rds(file = x),
          SNP_positions  = SNP_positions,
          chromosome_map = chromosome_map
        )
      ),
    write_files = read_files |>
      str_replace("pcadapt", "manhattan_plot_custom") |>
      str_replace(".rds", ".png")
  )
```

```{r}
#| label: PlotsSave

manhattans |> (\(x) {
  map2(x$write_files, x$plots,
    \(x, y) {
      ggsave(
        x |> here("output", "plots", ... = _),
        plot   = y,
        width  = 6000,
        height = 2000,
        units  = "px"
      )
    }
  )
})()
```

#### Coast and Islands Multiplot

```{r}
layout <-  "
AA######
BBCC####
DDEEFF##
GGHHIIJJ
"

multi_plot_coast_islands <- manhattans$plots[[4]]  +
    manhattans$plots[[5]] + manhattans$plots[[9]]  +
    manhattans$plots[[3]] + manhattans$plots[[8]]  + manhattans$plots[[1]] +
    manhattans$plots[[7]] + manhattans$plots[[10]] + manhattans$plots[[13]] + manhattans$plots[[2]] +
    plot_layout(design = layout, axes = "collect_x", axis_titles = "collect")

ggsave(
  here("output", "plots", "multi_plot_coast_islands.png"),
  plot   = multi_plot_coast_islands,
  width  = 12000,
  height = 6000,
  units = "px"
)
```

### Generate plots with outliers

```{r}
#| label: PlotsGenOutliers

manhattans_outliers <- tibble(
  read_files_pcadapt  = list.files(here("output")) |> str_subset("pcadapt")
) |> 
  mutate(
    plots       = map(
      read_files_pcadapt,
      \(x) manhattan_plot_custom_2(
        pcadapt            = here("output", x) |> read_rds(),
        SNP_positions      = SNP_positions,
        chromosome_map     = chromosome_map,
        outliers_positions = here("output", x) |>
          read_rds() |>
          Get_outliers(pvalue_threshold = .05) |> 
          select(CHROM, POS)
      )
    ),
    write_files = read_files_pcadapt |>
      str_replace("pcadapt", "manhattan_plot_custom") |>
      str_replace(".rds", "_outliers.png")
  )
```

```{r}
#| label: PlotsSaveOutliers

map2(
  manhattans_outliers$write_files, manhattans_outliers$plots,
  \(x, y) {
    ggsave(
      here("output", "plots", "manhattan_new", "outliers", x),
      plot   = y,
      width  = 6000,
      height = 2000,
      units  = "px"
    )
  }
)
```

#### Coast and Islands Multiplot

```{r}
layout <-  "
AA######
BBCC####
DDEEFF##
GGHHIIJJ
"

multi_plot_coast_islands_outliers <- manhattans_outliers$plots[[4]]  +
    manhattans_outliers$plots[[5]] + manhattans_outliers$plots[[9]]  +
    manhattans_outliers$plots[[3]] + manhattans_outliers$plots[[8]]  + manhattans_outliers$plots[[1]] +
    manhattans_outliers$plots[[7]] + manhattans_outliers$plots[[10]] + manhattans_outliers$plots[[13]] + manhattans_outliers$plots[[2]] +
    plot_layout(design = layout, axes = "collect_x", axis_titles = "collect")

ggsave(
  here("output", "plots", "multi_plot_coast_islands_outliers.png"),
  plot   = multi_plot_coast_islands_outliers,
  width  = 12000,
  height = 6000,
  units = "px"
)
```

### Generate plots with match

```{r}
#| label: PlotsGenMatch

manhattans_outliers_match <- tibble(
  read_files_pcadapt = list.files(here("output")) |> str_subset("pcadapt"),
  read_files_match   = list.files(here("output")) |> str_subset("outliers_annotations")
) |> 
  mutate(
    plots       = map2(
      read_files_pcadapt, read_files_match,
      \(x, y) manhattan_plot_custom_2(
        pcadapt            = here("output", x) |> read_rds(),
        SNP_positions      = SNP_positions,
        chromosome_map     = chromosome_map,
        outliers_positions = here("output", x) |>
          read_rds() |>
          Get_outliers(pvalue_threshold = .05) |> 
          select(CHROM, POS),
        outliers_match     = here("output", y) |> 
          read_csv2() |>
          distinct(`GenBank seq accession`, POS) |> 
          rename("CHROM" = `GenBank seq accession`)
      )
    ),
    write_files = read_files_pcadapt |>
      str_replace("pcadapt", "manhattan_plot_custom") |>
      str_replace(".rds", "_outliers_match.png")
  )
```

```{r}
#| label: PlotsGenMatch

map2(
  manhattans_outliers_match$write_files, manhattans_outliers_match$plots,
  \(x, y) {
    ggsave(
      here("output", "plots", "manhattan_new", "match", x),
      plot   = y,
      width  = 6000,
      height = 2000,
      units  = "px"
    )
  }
)
```

#### Coast and Islands Multiplot

```{r}
layout <-  "
AA######
BBCC####
DDEEFF##
GGHHIIJJ
"

multi_plot_coast_islands_match <- manhattans_outliers_match$plots[[4]]  +
    manhattans_outliers_match$plots[[5]] + manhattans_outliers_match$plots[[9]]  +
    manhattans_outliers_match$plots[[3]] + manhattans_outliers_match$plots[[8]]  + manhattans_outliers_match$plots[[1]] +
    manhattans_outliers_match$plots[[7]] + manhattans_outliers_match$plots[[10]] + manhattans_outliers_match$plots[[13]] + manhattans_outliers_match$plots[[2]] +
    plot_layout(design = layout, axes = "collect_x", axis_titles = "collect")

ggsave(
  here("output", "plots", "multi_plot_coast_islands_match.png"),
  plot   = multi_plot_coast_islands_match,
  width  = 12000,
  height = 6000,
  units = "px"
)
```

### Clean memory

```{r}
#| label: ManhattanMemClean

rm(SNP_positions, chromosome_map,
   manhattans, multi_plot_coast_islands,
   multi_plot_coast_islands_outliers, manhattans_outliers_match,
   manhattans_outliers_match, multi_plot_coast_islands_match,
   layout)

gc()
```

## Figure 2 - PCA & map

### PCA plot All 1&2

```{r}
#| label: LoadPCA

pcadapt_lcwgs <- read_rds(file = here("output", "pcadapt_lcwgs_K9.rds"))

popmap_lcwgs <- tibble(
  long_names = factor(
    c(
      rep("bodega_bay",            5), # BB
      rep("big_sur",              13), # BIGC -> BCR -> BS
      rep("catalina_island",      11), # CAT
      rep("elkhorn",               6), # ELK
      rep("guadalupe_island",     10), # GUA
      rep("pacific_grove",        13), # HOP -> Pacific Grove PGR 
      rep("isla_san_jeronimo",    11), # ISJ
      rep("laguna_beach",         13), # LB
      rep("point_dume",            5), # PD
      rep("santa_barbara", 13), # SB
      rep("san_clemente_island",  10), # SCL
      rep("la_jolla_san_diego",   13), # SD
      rep("tomales_bay",           1), # TB
      rep("redondo_beach",        10), # RB
      rep("santa_cruz",   10) # SCH
    ),
    levels = c("big_sur", "bodega_bay", "catalina_island", "santa_cruz",
               "guadalupe_island", "isla_san_jeronimo", "la_jolla_san_diego",
               "laguna_beach", "pacific_grove", "point_dume", "tomales_bay",
               "san_clemente_island", "santa_barbara",
               "elkhorn", "redondo_beach")
  ),
  short_names = factor(
    c(
      rep("BB",   5), # BB
      rep("BS",  13), # BIGC -> BCR
      rep("CAT", 11), # CAT
      rep("ELK",  6), # ELK
      rep("GUA", 10), # GUA
      rep("PG",  13), # HOP -> Pacific Grove PGR 
      rep("ISJ", 11), # ISJ
      rep("LB",  13), # LB
      rep("PD",   5), # PD
      rep("SB",  13), # SB
      rep("SCL", 10), # SCL
      rep("SD",  13), # SD
      rep("TB",   1), # TB
      rep("RB",  10), # RB
      rep("SCH", 10) # SCH
    ),
    levels = c("BS", "BB", "CAT", "ELK", "GUA",
               "ISJ", "SD", "LB", "PG", "PD",
               "TB", "SCL", "SB", "SCH", "RB")
  )
)
```

```{r}
#| label: PCAMapPCAPlot

PCA <- PCA_plot(
  pcadapt_output = pcadapt_lcwgs,
  popmap         = popmap_lcwgs,
  axis_one       = -2,
  axis_two       = -1
)
```

```{r}
#| label: PCAMapPCASave

save_open_plot(
  path   = here("output", "plots", "PCA.pdf"),
  plot   = PCA,
  width  = 9,
  height = 9
)
```

#### Crop PCA

```{r}
#| label: PCAMapPlotCrop

PCA_crop <- PCA + xlim(-.065, -.0325) + ylim(.095, .1275) +
  # old crop = xlim(-.065, -.05) + ylim(.1125, .1275) +
  coord_fixed(ratio = 1) +
  theme(
    legend.position = "none",
    axis.title      = element_blank(),
    plot.background = element_rect(fill = "white", linetype = "longdash")
  )
PCA_crop$layers[[2]] <- NULL
```

```{r}
#| label: PCAMapPCAFuse

PCA_and_crop <- PCA + annotate(
  "rect",
  xmin  = -.07, xmax = -.0190,
  ymin  = .09, ymax = .1325,
  alpha = 0, colour = "black", linetype = "longdash", linewidth = .3
) + 
theme(legend.position = "none") +
inset_element(PCA_crop, left = 0.6, bottom = 0.6, right = 1, top = 1)
```

```{r}
#| label: PCAMapPCASave

save_open_plot(
  path   = here("output", "plots", "pca_crop.pdf"),
  plot   = PCA_and_crop,
  width  = 9,
  height = 9
)
```

#### Interactive PCA

```{r}
#| label: PCAMap2DInteractivePlot

PCA_plot(
  pcadapt_output = pcadapt_lcwgs,
  popmap         = popmap_lcwgs,
  x_offsets      = rep(.01, 15),
  y_offsets      = rep(.05, 15)
) |>
  ggplotly()
```

```{r}
#| label: PCAMapPCAInteractive

TD_PCA_plot <- pcadapt_lcwgs$scores |>
  as_tibble() |>
  rename(PC_1 = V1, PC_2 = V2, PC_3 = V3, PC_4 = V4) |> 
  mutate(pop = popmap_lcwgs$long_names) |> 
  as.data.frame() |> 
  plot_ly(
    x = ~PC_1, y = ~PC_2, z = ~PC_3,
    color = ~pop, colors = viridis(144, option = "turbo")
  ) |>
  add_markers(size = 12)

setwd(here("output", "plots"))
as_widget(TD_PCA_plot) |> saveWidget(
  file = here("output", "plots", "3D_PCA.html"),
  selfcontained = TRUE)
setwd(here())

rm(TD_PCA_plot)
```

```{r}
#| label: PCAMemClean

rm(pcadapt_lcwgs, PCA, PCA_crop)
gc()
```

### PCA plot All 2 to 5

```{r}
#| label: PCAMapPCAPlot

PCA2_3 <- PCA_plot(
  pcadapt_output = pcadapt_lcwgs,
  popmap         = popmap_lcwgs,
  axis_one       = 2,
  axis_two       = 3
) + theme(aspect.ratio = 1)

PCA3_4 <- PCA_plot(
  pcadapt_output = pcadapt_lcwgs,
  popmap         = popmap_lcwgs,
  axis_one       = 3,
  axis_two       = 4
) + theme(aspect.ratio = 1)

PCA4_5 <- PCA_plot(
  pcadapt_output = pcadapt_lcwgs,
  popmap         = popmap_lcwgs,
  axis_one       = 4,
  axis_two       = 5
) + theme(aspect.ratio = 1)

multiPCA <- PCA2_3 | PCA3_4 | PCA4_5 + plot_layout(widths = 1)

save_open_plot(
  path   = here("output", "plots", "PCA2to5.pdf"),
  plot   = multiPCA,
  width  = 27,
  height = 9
)
```

### Map - SST and current 
#### Formatting Copernicus data
```{r}
#| label: PCAMapMapFormatCurrents
#| eval: false

left_join(
  rast(
    x     = here("data", "Copernicus", "merged_uv",
                 "cmems_mod_glo_phy-cur_anfc_0.083deg_P1D-m_1721914334862.nc"),
    subds = "uo"
  ) |>
    mean() |> # Average on year
    aggregate(fact = 2, fun = "mean") |> # Lower resolution
    as.data.frame(xy = TRUE, na.rm = FALSE) |> 
    as_tibble() |> 
    rename(u_mean = mean),
  rast(
    x     = here("data", "Copernicus", "merged_uv",
                "cmems_mod_glo_phy-cur_anfc_0.083deg_P1D-m_1721914334862.nc"),
    subds = "vo"
  ) |>
    mean() |> # Average on year
    aggregate(fact = 2, fun = "mean") |> # Lower resolution
    as.data.frame(xy = TRUE, na.rm = FALSE) |> 
    as_tibble() |> 
    rename(v_mean = mean),
) |>
  write_rds(file = here("data", "Copernicus", "annual_average_currents_tb.RDS"))
```

```{r}
#| label: PCAMapMapFormatSST
#| eval: false

SST_maps <- here("data", "Copernicus", "SST_temperature_UKMO-L4_GHRSST") |> 
  list.files(full.names = TRUE) |>
  map(
    \(x) x |> 
      rast(lyrs = "analysed_sst", win = ext(-124,-113, 28.5, 38.5))
  ) |> 
  rast()

time(SST_maps) <- seq(as.Date("2023-01-01"), as.Date("2023-12-31"), by = "days")

SST_maps |>
  mean() |>
  (`-`)(273.15) |>
  saveRDS(file = here("data", "Copernicus", "annual_average_SST.rds"))

rm(SST_maps)
```

#### Import map data
```{r}
#| label: PCAMapMapLoad

currents_tibble_annual_mean_lres <- read_rds(
  file = here("data", "Copernicus", "annual_average_currents_tb.RDS")
)

SST_annual_mean <- readRDS(
  file = here("data", "Copernicus", "annual_average_SST.RDS")
)
```

#### Landmass
```{r}
#| label: PCAMapMapPrep

# Setting up landmass map from naturalearth
states <- ne_states(
  country     = c("united states of america", "mexico"),
  returnclass = "sf"
)

# Sampling site coordinates and misc info on map
sample_sites <- read_csv2(here("data", "low_coverage_sampling_sites.csv")) |>
  mutate(
    Popmap  = factor(
      Popmap,
      levels  = levels(popmap_lcwgs$long_names)
    ),
    lab_lon = Longitude + c(.85, .9, .60, .62, .90,
                            .63, .8, 1.1, .98,  1,
                              1, -1, .62, .70, .79),
    lab_lat = Latitude + c( .09, -.13, .25, .10, -.15,
                            .10,  .20, .06, .05,  .15,
                           -.17, -.27, .10, .15,  .25)
  ) |>
  arrange(Popmap) |> 
  select(Longitude, Latitude, Sampling_sites, Popmap, lab_lon, lab_lat) |> 
  mutate(
    Sampling_sites = gsub("\\n", "\n", Sampling_sites, fixed = TRUE)
  )

states_labels <- data.frame(
  "long" = c(-117.5, -115.5, -113.7, -115.4),
  "lat"  = c(35.5, 37, 35, 30.75),
  "lab"  = c("CA", "NV", "AZ", "BC")
)
city_labels <- data.frame(
  "lat"      = c(37.773972, 34.448113),
  "long"     = c(-122.431297, -120.471439),
  "lat_lab"  = c(37.7, 34.75),
  "long_lab" = c(-122.28, -120.435),
  "lab"      = c("San Francisco", "Point Conception")
)
ocean_labels <- data.frame(
  "long" = c(-121,-113.85),
  "lat"  = c(31,30.7),
  "lab"  = c("Pacific Ocean","Gulf\nof\nCalifornia")
)
```

#### Plot map
[Tutorial for surface temperature and current speed map](https://theoceancode.netlify.app/post/mapping_with_ggplot2/)

```{r}
#| label: PCAMapMapPlot

lcwgs_map <- ggplot() +
  # Temperature map
  geom_spatraster(data = SST_annual_mean, aes(fill = mean)) +
  # Temperature scale
  scale_fill_viridis(
    name = "Temp.\n (Â°C)",
    breaks = c(12.5, 15, 17.5, 20, 22.5),
    option = "turbo"
  ) +
  # Current vectors
  geom_segment(
    data      = currents_tibble_annual_mean_lres,
    mapping   = aes(
      x    = x,
      y    = y,
      xend = x + 2*u_mean,
      yend = y + 2*v_mean
    ),
    linewidth = .5,
    colour    = "#4d4d4d",
    arrow     = arrow(angle = 20, length = unit(0.035, "inches"), type = "closed"),
    linejoin  = "mitre",
    na.rm     = TRUE
  ) +
  # Landmass
  geom_sf(data = states) +
  # Crop map
  coord_sf(xlim = c(-124, -113), ylim = c(28.5, 38.5), expand = FALSE) +
  # Sampling sites points and labels
  new_scale("fill") +
  geom_point(
    sample_sites,
    mapping     = aes(
      x    = Longitude,
      y    = Latitude,
      fill = Popmap,
      size = 1.3
    ),
    shape       = 21,
    show.legend = FALSE
  ) +
  geom_label(
    sample_sites,
    mapping = aes(x = lab_lon, y = lab_lat,
                  label = Sampling_sites, fontface = "bold"),
    label.r = unit(0, "lines"),
    alpha   = .6
  ) +
  scale_fill_hue() +
  # Extra cities points and labels
  geom_point(
    city_labels,
    mapping     = aes(x = long, y = lat),
    size        = 4,
    shape       = 20,
    show.legend = FALSE
  ) +
  geom_text(
    city_labels,
    mapping    = aes(x = long_lab, y = lat_lab, label = lab, fontface = "bold"),
    lineheight = .7,
    hjust      = 0
  ) +
  # Ocean and state names
  geom_text(
    states_labels,
    mapping = aes(x = long, y = lat, label = lab),
    size    = 5.5
  ) +
  geom_text(
    ocean_labels[2, ],
    mapping  = aes(x = long, y = lat, label = lab),
    colour   = "ivory",
    size     = 5,
    fontface = "bold"
  ) +
  geom_label(
    ocean_labels[1, ],
    mapping       = aes(x = long, y = lat, label = lab),
    colour        = "black",
    size          = 5,
    label.padding = unit(0.2, "lines"),
    label.r       = unit(0, "lines"),
    fontface      = "bold"
  ) +
  # Vector scale
  geom_label(
    aes(x = -122, y = 29.425, label = ".25 m/s\n"),
    size          = 4.5,
    label.padding = unit(0.5, "lines"),
    label.r       = unit(0, "lines")
  ) +
  geom_segment(
    aes(x = -122.25, y = 29.25, xend = -121.75, yend = 29.25),
    size     = .5,
    arrow    = arrow(
      angle  = 20,
      length = unit(0.035, "inches"),
      type   = "closed"
    ),
    linejoin = "mitre"
  ) +
  # Cartographic scale
  geom_label(
    aes(x = -119.14, y = 28.69, label = "        "),
    label.r = unit(0, "lines")
  ) +
  annotation_scale(location = "bl", width_hint = 0.4) +
  # Orientation
  annotation_north_arrow(
    location = "tr",
    style    = north_arrow_fancy_orienteering()
  ) +
  # Axes
  labs(x = "Longitude", y = "Latitude") +
  scale_x_continuous(
    breaks = c(-120, -115),
    labels = c("120Â°W", "115Â°W")
  ) +
  scale_y_continuous(
    breaks = c(30, 35),
    labels = unit_format(suffix = "Â°N", sep = "")
  )
```

### Memory cleanup
```{r}
#| label: PCAMapMapSave

save_open_plot(
  here("output", "plots", "temp_current_map_lres.pdf"),
  plot   = lcwgs_map,
  width  = 9,
  height = 9
)

rm(currents_tibble_annual_mean_lres, SST_annual_mean,
   states,
   sample_sites, states_labels, city_labels, ocean_labels,
   current_uv_scalar)
gc()
```

### Fuse PCA plot and map
```{r}
#| label: PCAMapFuse

PCA_map <- PCA_and_crop + lcwgs_map +
  plot_annotation(tag_levels = list(c("A", "", "B"))) &
  theme(
    text      = element_text(size = 14),
    axis.text = element_text(size = 12),
    plot.tag  = element_text(face = "bold")
    )
```

```{r}
#| label: PCAMapSave

save_open_plot(
  here("output", "plots", "pca_map.png"),
  plot   = PCA_map,
  width  = 17.5,
  height = 11.25
)

rm(PCA_map, PCA_and_crop, lcwgs_map)
gc()
```

## Figure ? - Islands Bathymetry

### Data

```{r}
#| label: BathyPrep

currents_tibble_annual_mean <- left_join(
  rast(
    x     = here("data", "Copernicus", "merged_uv",
                 "cmems_mod_glo_phy-cur_anfc_0.083deg_P1D-m_1721914334862.nc"),
    subds = "uo"
  ) |>
    mean() |> # Average on year
    as.data.frame(xy = TRUE, na.rm = FALSE) |> 
    as_tibble() |> 
    rename(u_mean = mean),
  rast(
    x     = here("data", "Copernicus", "merged_uv",
                "cmems_mod_glo_phy-cur_anfc_0.083deg_P1D-m_1721914334862.nc"),
    subds = "vo"
  ) |>
    mean() |> # Average on year
    as.data.frame(xy = TRUE, na.rm = FALSE) |> 
    as_tibble() |> 
    rename(v_mean = mean),
)

catalina_df <- getNOAA.bathy(
    lon1 = -121, lon2 = -116,
    lat1 = 32,   lat2 = 35,
    resolution = .5
  ) |> 
  fortify.bathy() |>
  mutate(z = ifelse(z > 0, NA, z)) # Remove landmass data

states <- ne_states(
  country     = c("united states of america", "mexico"),
  returnclass = "sf"
)
```

### Map

```{r}
#| label: BathyPrep

bathy <- ggplot() +
  # Plot bathymetry
  geom_raster(data = catalina_df, mapping = aes(x = x, y = y, fill = z)) +
  # Plot landmass
  geom_sf(data = states) +
  # Plot surface current speed
  geom_segment(
    data      = currents_tibble_annual_mean,
    mapping   = aes(
      x    = x,
      y    = y,
      xend = x + u_mean,
      yend = y + v_mean
    ),
    linewidth = .5,
    colour    = "#4d4d4d",
    arrow     = arrow(angle = 20, length = unit(0.035, "inches"), type = "closed"),
    linejoin  = "mitre",
    na.rm     = TRUE
  ) +
  # Plot scales
  scale_fill_hypso_tint_c(palette = "colombia_bathy", limits = range(catalina_df$z, na.rm = TRUE)) +
  geom_label(
    aes(x = -120.4, y = 32.3, label = ".25 m/s\n"),
    size = 4.5,
    label.padding = unit(0.5, "lines")
  ) +
  geom_segment(
    aes(x = -120.52, y = 32.25, xend = -120.27, yend = 32.25),
    arrow = arrow(angle = 15, length = unit(0.04, "inches"), type = "closed")
  ) +
  geom_label(aes(x = -119.705, y = 32.08, label = "        ")) +
  annotation_scale(location = "bl", width_hint = 0.4) +
  annotation_north_arrow(
    location = "tr",
    style    = north_arrow_fancy_orienteering()
  ) +
  # Crop map
  coord_sf(xlim = c(-121, -116), ylim = c(32, 35), expand = FALSE) +
  # Axis labels and theme
  labs(x = "Longitude", y = "Latitude") +
  scale_y_continuous(
    breaks = seq(32, 35, 1),
    labels = unit_format(suffix = "Â°N", sep = "")
  ) +
  theme(
    legend.position = c(.93, .73),
    plot.margin     = margin(t = 0, r = 1, b = 0, l = .5, unit = "cm")
  )
```

```{r}
#| label: BathySave

save_open_plot(
  here("output", "plots", "bathy.pdf"),
  plot   = bathy,
  width  = 9,
  height = 7
)

rm(currents_tibble_annual_mean, catalina_df, states, bathy)
```

## Figure 5 - Admixture plot
Change individuals order in the file `Individuals_plot_order.txt`

### K = 5 populations
```{r}
admixture_data_5 <- read_table(
  here("data", "lcwgs", "8-Embiotoca_filtered.snmf", "K5", "run16",
       "8-Embiotoca_filtered_r16.5.Q"),
  col_names = paste0("Pop ", seq(1, 5))
) |> 
  mutate(Individuals = Indiv_list |> unique()) |> 
  relocate(Individuals) |> 
  pivot_longer(
    -c(Individuals),
    names_to  = "Populations",
    values_to = "Ancestry proportions"
  )

admixture_plot_5 <- admixture_data_5 |>
  ggplot(
    aes(
      x    = factor(
        Individuals,
        levels = here("data", "Individuals_plot_order.txt") |> 
          read.table() |>
          unlist() |>
          as.vector() 
      ),
      y    = `Ancestry proportions`,
      fill = Populations
    )
  ) +
  geom_col(position = "stack", width = 1) +
  scale_fill_viridis(discrete = TRUE, option = "turbo") +
  labs(x = "Individuals") +
  theme_minimal() +
  theme(
    axis.text.x = element_text(size = 8, angle = 90, vjust = 0.5, hjust = 1)
  )

save_open_plot(
  path   = here("output", "plots", "admixture_plot_K=5.pdf"),
  plot   = admixture_plot_5,
  width  = 16,
  height = 6
)
```

### K = 6 populations

#### Load data
```{r}
#| label: AdmPlotPrep

Indiv_meta <- read_csv2(here("data", "Individuals_coordinates.csv"))

admixture_data_6 <- read_table(
  here("data", "8-Embiotoca_filtered.snmf", "K6", "run16",
       "8-Embiotoca_filtered_r16.6.Q"),
  col_names = paste0("Pop ", seq(1, 6))
) |> 
  mutate(Individuals = Indiv_list |> 
  relocate(Individuals) |> 
  pivot_longer(
    -c(Individuals),
    names_to  = "Populations",
    values_to = "Ancestry proportions"
  )
```

#### plot
```{r}
#| label: AdmPlot

admixture_plot_6 <- admixture_data_6 |>
  ggplot(
    aes(
      x    = factor(
        Individuals,
        levels = here("data", "Individuals_plot_order.txt") |> 
          read.table() |>
          unlist() |>
          as.vector() 
      ),
      y    = `Ancestry proportions`,
      fill = Populations
    )
  ) +
  geom_col(position = "stack", width = 1) +
  scale_fill_viridis(discrete = TRUE, option = "turbo") +
  labs(x = "Individuals") +
  theme_minimal() +
  theme(
    axis.text.x = element_text(size = 8, angle = 90, vjust = 0.5, hjust = 1)
  )
```

```{r}
#| label: AdmSave

save_open_plot(
  path   = here("output", "plots", "admixture_plot_K=6.pdf"),
  plot   = admixture_plot_6,
  width  = 16,
  height = 6
  )

rm(Indiv_list, admixture_data, admixture_plot)
```

### K = 7 populations
```{r}
admixture_data_7 <- here("output", "admixture", "8-Embiotoca_filtered_r46.7.Q") |> 
  read_admixture(pops = 7)

admixture_plot_7 <- admixture_data_7 |> 
  admixture_plot(pop_map = Indiv_meta |> select(Indiv, popmap))

save_open_plot(
  path   = here("output", "plots", "admixture_plot_K=7.pdf"),
  plot   = admixture_plot_7,
  width  = 8,
  height = 3
)
```

### K = 7 populations but higher cross-entropy

```{r}
admixture_data_7_bad <- read_table(
  here("data", "lcwgs", "8-Embiotoca_filtered.snmf", "K7", "run44",
       "8-Embiotoca_filtered_r44.7.Q"),
  col_names = paste0("Pop ", seq(1, 7))
) |> 
  mutate(Individuals = Indiv_list) |> 
  relocate(Individuals) |> 
  pivot_longer(
    -c(Individuals),
    names_to  = "Populations",
    values_to = "Ancestry proportions"
  )

admixture_plot_7_bad <- admixture_data_7_bad |>
  ggplot(
    aes(
      x    = factor(
        Individuals,
        levels = here("data", "Individuals_plot_order.txt") |> 
          read.table() |>
          unlist() |>
          as.vector() 
      ),
      y    = `Ancestry proportions`,
      fill = Populations
    )
  ) +
  geom_col(position = "stack", width = 1) +
  scale_fill_viridis(discrete = TRUE, option = "turbo") +
  labs(x = "Individuals") +
  theme_minimal() +
  theme(
    axis.text.x = element_text(size = 8, angle = 90, vjust = 0.5, hjust = 1)
  )

save_open_plot(
  path   = here("output", "plots", "admixture_plot_K=7_bad.pdf"),
  plot   = admixture_plot_7_bad,
  width  = 16,
  height = 6
)
```

### K = 8 populations
```{r}
admixture_data_8 <- read_table(
  here("data", "lcwgs", "8-Embiotoca_filtered.snmf", "K8", "run8",
       "8-Embiotoca_filtered_r8.8.Q"),
  col_names = paste0("Pop ", seq(1, 8))
) |> 
  mutate(Individuals = Indiv_list) |> 
  relocate(Individuals) |> 
  pivot_longer(
    -c(Individuals),
    names_to  = "Populations",
    values_to = "Ancestry proportions"
  )

admixture_plot_8 <- admixture_data_8 |>
  ggplot(
    aes(
      x    = factor(
        Individuals,
        levels = here("data", "Individuals_plot_order.txt") |> 
          read.table() |>
          unlist() |>
          as.vector() 
      ),
      y    = `Ancestry proportions`,
      fill = Populations
    )
  ) +
  geom_col(position = "stack", width = 1) +
  scale_fill_viridis(discrete = TRUE, option = "turbo") +
  labs(x = "Individuals") +
  theme_minimal() +
  theme(
    axis.text.x = element_text(size = 8, angle = 90, vjust = 0.5, hjust = 1)
  )

save_open_plot(
  path   = here("output", "plots", "admixture_plot_K=8.pdf"),
  plot   = admixture_plot_8,
  width  = 16,
  height = 6
)
```

## Figure 6 - Repartition range inference with `tess3r`

### Data prep

```{r}
#| eval: false

indiv <- here("data", "Individual_list.rds") |> read_rds() |> unique()

coords <- read_csv2(here("data", "low_coverage_sampling.csv")) |> 
  select(Longitude, Latitude, Code)

coordinates <- tibble(Indiv = indiv) |>
  mutate(
    Code = Indiv |>
      map(\(x)(x |> str_split("_") |> unlist() |> _[2])) |>
      unlist()
  )

coordinates <- left_join(coordinates, coords)

coordinates |> write_csv2(file = here("data", "individuals_coordinates.csv"))
rm(indiv, coords, coordinates)



polygon_mask <- cbind("lon" = c(-116.745, -113.826, -113, -113, -116.745),
                           "lat" = c(33.732, 28.5, 28.5, 33.732, 33.732)) |> 
  vect("polygon", crs = "GEOGCRS[\"WGS 84 (CRS84)\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    USAGE[\n        SCOPE[\"unknown\"],\n        AREA[\"World\"],\n        BBOX[-90,-180,90,180]],\n    ID[\"OGC\",\"CRS84\"]]")

ne_states(
  country     = c("united states of america", "mexico"),
  returnclass = "sv"
) |>
  crop(y = ext(-124, -113, 28.5, 38.5)) |>
  rasterize(y = rast(ext(-124, -113, 28.5, 38.5), ncols = 2200, nrows = 2000)) |> 
  subst(from = NA, to = 2) |> 
  subst(from = 1, to = NA) |> 
  subst(from = 2, to = 1) |> 
  terra::mask(mask = polygon_mask, inverse = TRUE) |> 
  writeRaster(here("data", "ocean_map.tif"), overwrite = TRUE)

getNOAA.bathy(
    lon1 = -124, lon2 = -113,
    lat1 = 28.5, lat2 = 38.5,
    resolution = .5
  ) |> 
  fortify.bathy() |>
  mutate(z = ifelse(z > 0, NA, z)) |>  # Remove landmass data
  mutate(z = ifelse(z < -40, NA, z)) |>  # Remove landmass data
  mutate(z = ifelse(z <= 0 , 1, z)) |> 
  rast(type = "xyz") |> 
  terra::mask(mask = vect(cbind("lon" = c(-120.8, -113.826, -113, -113, -120.8),
                                "lat" = c(38.426, 28.5, 28.5, 38.426, 38.426)),
                          "polygon"),
              inverse = TRUE) |> 
  terra::writeRaster(here("data", "fourty_meter_mask.tif"), overwrite = TRUE)
```

### Load Data

```{r}
coordinates <- here("data", "individuals_coordinates.csv") |>
  read_csv2() |>
  select(Longitude, Latitude) |> 
  as.matrix()

q_matrix <- read_table(
  here("data", "8-Embiotoca_filtered_r46.7.Q"),
  col_names = paste0("Pop ", seq(1, 7))
) |> as.matrix()

catalina_df <- getNOAA.bathy(
    lon1 = -124, lon2 = -113,
    lat1 = 28.5, lat2 = 38.5,
    resolution = .5
  ) |> 
  fortify.bathy() |>
  mutate(z = ifelse(z > 0, NA, z)) # Remove landmass data

states <- ne_states(
  country     = c("united states of america", "mexico"),
  returnclass = "sf"
)
```

```{r}
popmap_lcwgs <- tibble(
  long_names = factor(
    c(
      rep("bodega_bay",            5), # BB
      rep("big_sur",              13), # BIGC -> BCR -> BS
      rep("catalina_island",      11), # CAT
      rep("elkhorn",               6), # ELK
      rep("guadalupe_island",     10), # GUA
      rep("pacific_grove",        13), # HOP -> Pacific Grove PGR 
      rep("isla_san_jeronimo",    11), # ISJ
      rep("laguna_beach",         13), # LB
      rep("point_dume",            5), # PD
      rep("santa_barbara",        13), # SB
      rep("san_clemente_island",  10), # SCL
      rep("la_jolla_san_diego",   13), # SD
      rep("tomales_bay",           1), # TB
      rep("redondo_beach",        10), # RB
      rep("santa_cruz",           10) # SCH
    ),
    levels = c("big_sur", "bodega_bay", "catalina_island", "santa_cruz",
               "guadalupe_island", "isla_san_jeronimo", "la_jolla_san_diego",
               "laguna_beach", "pacific_grove", "point_dume", "tomales_bay",
               "san_clemente_island", "santa_barbara",
               "elkhorn", "redondo_beach")
  ),
  short_names = factor(
    c(
      rep("BB",   5), # BB
      rep("BS",  13), # BIGC -> BCR
      rep("CAT", 11), # CAT
      rep("ELK",  6), # ELK
      rep("GUA", 10), # GUA
      rep("PG",  13), # HOP -> Pacific Grove PGR 
      rep("ISJ", 11), # ISJ
      rep("LB",  13), # LB
      rep("PD",   5), # PD
      rep("SB",  13), # SB
      rep("SCL", 10), # SCL
      rep("SD",  13), # SD
      rep("TB",   1), # TB
      rep("RB",  10), # RB
      rep("SCH", 10) # SCH
    ),
    levels = c("BS", "BB", "CAT", "ELK", "GUA",
               "ISJ", "SD", "LB", "PG", "PD",
               "TB", "SCL", "SB", "SCH", "RB")
  )
)

sample_sites <- read_csv2(here("data", "low_coverage_sampling_sites.csv")) |>
  mutate(
    Popmap  = factor(
      Popmap,
      levels  = levels(popmap_lcwgs$long_names)
    ),
    lab_lon = Longitude + c(.85, .9, .60, .62, .90,
                            .63, .8, 1.1, .98,  -1,
                              1, -1, .62, .70, .79),
    lab_lat = Latitude + c( .09, -.13, .25, .10, -.15,
                            .10,  .20, .06, .05,  .10,
                           -.17, -.27, .10, .15,  .25)
  ) |>
  arrange(Popmap) |>
  select(Longitude, Latitude, Sampling_sites, Popmap, lab_lon, lab_lat) |> 
  mutate(
    Sampling_sites = gsub("\\n", "\n", Sampling_sites, fixed = TRUE)
  )

states <- ne_states(
  country     = c("united states of america", "mexico"),
  returnclass = "sf"
)
```

### Plot map

```{r}
gg_obj <- ggtess3Q(
  q_matrix,
  coordinates,
  resolution      = c(1000, 1000),
  window          = c(-124, -113, 28.5, 38.5),
  background      = TRUE,
  raster.filename = here("data", "fourty_meter_mask.tif"),
  # raster.filename = here("data", "ocean_map.tif"),
  col.palette     = CreatePalette(turbo(n = 7), 25)
)

pop_area <- gg_obj +
  ggnewscale::new_scale_fill() +
  geom_raster(
    data    = catalina_df,
    mapping = aes(x = x, y = y, fill = z),
    alpha = .5
  ) +
  scale_fill_hypso_tint_c(
    palette = "colombia_bathy",
    limits  = range(catalina_df$z, na.rm = TRUE)
  ) +
  geom_sf(data = states) +
  coord_sf(xlim = c(-124, -113), ylim = c(28.5, 38.5), expand = FALSE) +
  geom_point(
    sample_sites,
    mapping     = aes(
      x    = Longitude,
      y    = Latitude,
      size = 1
    ),
    shape       = 21,
    show.legend = FALSE
  ) +
  geom_label(
    sample_sites,
    mapping = aes(x = lab_lon, y = lab_lat,
                  label = Sampling_sites, fontface = "bold"),
    label.r = unit(0, "lines"),
    alpha   = .6
  ) +
  geom_label(
    aes(x = -119.14, y = 28.69, label = "        "),
    label.r = unit(0, "lines")
  ) +
  annotation_scale(location = "bl", width_hint = 0.4) +
  annotation_north_arrow(
    location = "tr",
    style    = north_arrow_fancy_orienteering()
  ) +
  labs(
    title = "Population repartition for K = 7 populations",
    x     = "Longitude",
    y     = "Latitude"
  ) +
  scale_x_continuous(
    breaks = c(-120, -115),
    labels = c("120Â°W", "115Â°W")
  ) +
  scale_y_continuous(
    breaks = c(30, 35),
    labels = unit_format(suffix = "Â°N", sep = "")
  ) +
  theme_classic()

pop_area$layers <- pop_area$layers[c(2, 1, 3, 4, 5, 6, 7, 8)]
```

```{r}
save_open_plot(
  here("output", "plots", "pop_areas_K=7_40m_bathy.png"),
  plot   = pop_area,
  width  = 9,
  height = 9
)
```

## Figure 7 - IBD
