---
title: "EJA Population Genomics Low coverage"
author: "Arthur OulÃ¨s"
format: html
editor: source
engine: knitr
---
## Load packages

```{r}
#| label: LoadPackages
#| echo: false

c("here", "tidyverse",
  "vcfR", "pcadapt", "OutFLANK", "adegenet", "ape",
  "patchwork", "viridisLite") |>
  lapply(library, character.only = TRUE) |> invisible()
```

## Load data analysis functions
```{r}
#| label: LoadExtFunc

source(here("functions", "lcwgs_tidy_functions.R"))
source(here("functions", "plot_functions.R"))
```

## Helper objects

```{r}
#| label: GenomeMap
#| echo: false

lcwgs_vcf <- read.vcfR(here("data", "SNPS", "8-Embiotoca_filtered.vcf.gz"))

lcwgs_vcf |>
  getFIX() |>
  as_tibble() |>
  select(CHROM, POS) |>
  mutate(POS = as.numeric(POS)) |>
  mutate(rank = row_number()) |>
  select(rank, CHROM, POS) |> 
  saveRDS(file = here("data", "SNP_positions.rds"))

lcwgs_vcf |>
  extract_gt_tidy() |>
  _$Indiv |>
  write_rds(file = here("data", "Individual_list.rds"))

rm(lcwgs_vcf)
```

## Data conversions

### Convert vcf to bed file using plink2

#### Initial vcf conversion

```{bash}
cd C:/Users/aoules/Desktop/R_projects/Surfperch_GenPop/plink2

./plink2 --vcf 8-Embiotoca_filtered.vcf.gz --make-bed --out 8-Embiotoca_filtered
```

#### Generate whitelists and subset bed files

```{r}
#| label: GenerateSaveWhitelists
#| eval: false

Individuals_list <- here("data", "individuals_coordinates.csv") |>
  read_csv2() |>
  pull(Indiv)

Individuals_list |> 
  str_subset(
    pattern = paste(c("SCL", "GUA", "CAT", "ISJ"), collapse = "|"),
    negate  = TRUE
  ) |> 
  write_lines(here("plink2", "whitelist_coastal.txt"))

Individuals_list |> 
  str_subset(pattern = paste(c("SCL", "GUA", "CAT", "ISJ"), collapse = "|"))  |>
  write_lines(here("plink2", "whitelist_islands.txt"))

Individuals_list |> 
  str_subset(
    pattern = paste(c("SCL", "GUA", "CAT"), collapse = "|"),
    negate  = TRUE
  ) |>
  write_lines(here("plink2", "whitelist_coastal_isj.txt"))

Individuals_list |> 
  str_subset(
    pattern = paste(c("GUA", "CAT", "ISJ"), collapse = "|"),
    negate  = TRUE
  ) |>
  write_lines(here("plink2", "whitelist_coastal_scl.txt"))

Individuals_list |> 
  str_subset(
    pattern = paste(c("SCL", "CAT", "ISJ"), collapse = "|"),
    negate  = TRUE
  ) |>
  write_lines(here("plink2", "whitelist_coastal_gua.txt"))

Individuals_list |> 
  str_subset(
    pattern = paste(c("SCL", "GUA", "ISJ"), collapse = "|"),
    negate  = TRUE
  ) |>
  write_lines(here("plink2", "whitelist_coastal_cat.txt"))

Individuals_list |> 
  str_subset(pattern = paste(c("SCL", "CAT"), collapse = "|")) |>
  write_lines(here("plink2", "whitelist_cat_scl.txt"))

Individuals_list |> 
  str_subset(pattern = paste(c("GUA", "CAT"), collapse = "|")) |>
  write_lines(here("plink2", "whitelist_gua_cat.txt"))

Individuals_list |> 
  str_subset(pattern = paste(c("SCL", "GUA"), collapse = "|")) |> 
  write_lines(here("plink2", "whitelist_gua_scl.txt"))

Individuals_list |> 
  str_subset(pattern = paste(c("GUA", "ISJ"), collapse = "|")) |>
  write_lines(here("plink2", "whitelist_gua_isj.txt"))

Individuals_list |> 
  str_subset(pattern = paste(c("CAT", "ISJ"), collapse = "|")) |> 
  write_lines(here("plink2", "whitelist_cat_isj.txt"))

Individuals_list |> 
  str_subset(pattern = paste(c("SCL", "ISJ"), collapse = "|")) |> 
  write_lines(here("plink2", "whitelist_scl_isj.txt"))

rm(Individuals_list)
```

```{bash}
cd C:/Users/aoules/Desktop/R_projects/Surfperch_GenPop/plink2

./plink2 --bfile 8-Embiotoca_filtered --keep whitelist_coastal.txt --make-bed --out 8-Embiotoca_filtered_coastal

./plink2 --bfile 8-Embiotoca_filtered --keep whitelist_islands.txt --make-bed --out 8-Embiotoca_filtered_isl

./plink2 --bfile 8-Embiotoca_filtered --keep whitelist_coastal_isj.txt --make-bed --out 8-Embiotoca_filtered_coastal_isj

./plink2 --bfile 8-Embiotoca_filtered --keep whitelist_coastal_scl.txt --make-bed --out 8-Embiotoca_filtered_coastal_scl

./plink2 --bfile 8-Embiotoca_filtered --keep whitelist_coastal_gua.txt --make-bed --out 8-Embiotoca_filtered_coastal_gua

./plink2 --bfile 8-Embiotoca_filtered --keep whitelist_coastal_cat.txt --make-bed --out 8-Embiotoca_filtered_coastal_cat

./plink2 --bfile 8-Embiotoca_filtered --keep whitelist_cat_scl.txt --make-bed --out 8-Embiotoca_filtered_cat_scl

./plink2 --bfile 8-Embiotoca_filtered --keep whitelist_gua_cat.txt --make-bed --out 8-Embiotoca_filtered_gua_cat

./plink2 --bfile 8-Embiotoca_filtered --keep whitelist_gua_scl.txt --make-bed --out 8-Embiotoca_filtered_gua_scl

./plink2 --bfile 8-Embiotoca_filtered --keep whitelist_GUA_ISJ.txt --make-bed --out 8-Embiotoca_filtered_GUA_ISJ

./plink2 --bfile 8-Embiotoca_filtered --keep whitelist_cat_isj.txt --make-bed --out 8-Embiotoca_filtered_cat_isj

./plink2 --bfile 8-Embiotoca_filtered --keep whitelist_scl_isj.txt --make-bed --out 8-Embiotoca_filtered_scl_isj

./plink2 --bfile 8-Embiotoca_filtered --keep whitelist_north.txt --make-bed --out 8-Embiotoca_filtered_north

./plink2 --bfile 8-Embiotoca_filtered --keep whitelist_south.txt --make-bed --out 8-Embiotoca_filtered_south
```

#### Corresponding popmaps

```{r}
#| label: GenerateSavePopMaps
#| echo: false

popmaps <- tibble(
  vcf_paths = here("plink2") |> list.files(pattern = ".vcf$"),
  bed_paths = here("plink2") |> list.files(pattern = ".bed$"),
  ) |> 
  mutate(
    names = bed_paths |>
      str_remove("8-Embiotoca_filtered") |>
      str_remove(".bed") |>
      str_remove("_"),
    maps     = list(
      "all" = c(
        rep("bodega_bay",            5), # BB
        rep("big_creek",            13), # BIGC -> BCR
        rep("catalina_island",      11), # CAT
        rep("elkhorn",               6), # ELK
        rep("guadalupe_island",     10), # GUA
        rep("pacific_grove",        13), # HOP -> Pacific Grove PGR 
        rep("isla_san_jeronimo",    11), # ISJ
        rep("laguna_beach",         13), # LB
        rep("point_dume",            5), # PD
        rep("santa_barbara",        13), # SB
        rep("san_clemente_island",  10), # SCL
        rep("la_jolla_san_diego",   13), # SD
        rep("tomales_bay",           1), # TB
        rep("redondo_beach",        10), # RB
        rep("santa_cruz_harbour",   10) # SCH
      ), "cat_isj" = c(
        rep("catalina_island",      11), # CAT
        rep("isla_san_jeronimo",    11)  # ISJ
      ), "cat_scl" = c(
        rep("catalina_island",      11), # CAT
        rep("san_clemente_island",  10)  # SCL
      ), "coastal" = c(
        rep("bodega_bay",            5), # BB
        rep("big_creek",            13), # BIGC -> BCR
        rep("elkhorn",               6), # ELK
        rep("pacific_grove",        13), # HOP -> Pacific Grove PGR
        rep("laguna_beach",         13), # LB
        rep("point_dume",            5), # PD
        rep("santa_barbara",        13), # SB
        rep("la_jolla_san_diego",   13), # SD
        rep("tomales_bay",           1), # TB
        rep("redondo_beach",        10), # RB
        rep("santa_cruz_harbour",   10)  # SCH
      ), "coastal_cat" = c(
        rep("bodega_bay",            5), # BB
        rep("big_creek",            13), # BIGC -> BCR
        rep("catalina_island",      11), # CAT
        rep("elkhorn",               6), # ELK
        rep("pacific_grove",        13), # HOP -> Pacific Grove PGR
        rep("laguna_beach",         13), # LB
        rep("point_dume",            5), # PD
        rep("santa_barbara",        13), # SB
        rep("la_jolla_san_diego",   13), # SD
        rep("tomales_bay",           1), # TB
        rep("redondo_beach",        10), # RB
        rep("santa_cruz_harbour",   10)  # SCH
      ), "coastal_gua" = c(
        rep("bodega_bay",            5), # BB
        rep("big_creek",            13), # BIGC -> BCR
        rep("elkhorn",               6), # ELK
        rep("guadalupe_island",     10), # GUA
        rep("pacific_grove",        13), # HOP -> Pacific Grove PGR
        rep("laguna_beach",         13), # LB
        rep("point_dume",            5), # PD
        rep("santa_barbara",        13), # SB
        rep("la_jolla_san_diego",   13), # SD
        rep("tomales_bay",           1), # TB
        rep("redondo_beach",        10), # RB
        rep("santa_cruz_harbour",   10)  # SCH
      ), "coastal_gua_cat" = c(
        rep("bodega_bay",            5), # BB
        rep("big_creek",            13), # BIGC -> BCR
        rep("catalina_island",      11), # CAT
        rep("elkhorn",               6), # ELK
        rep("guadalupe_island",     10), # GUA
        rep("pacific_grove",        13), # HOP -> Pacific Grove PGR
        rep("laguna_beach",         13), # LB
        rep("point_dume",            5), # PD
        rep("santa_barbara",        13), # SB
        rep("la_jolla_san_diego",   13), # SD
        rep("tomales_bay",           1), # TB
        rep("redondo_beach",        10), # RB
        rep("santa_cruz_harbour",   10)  # SCH
      ), "coastal_gua_cat_scl" = c(
        rep("bodega_bay",            5), # BB
        rep("big_creek",            13), # BIGC -> BCR
        rep("catalina_island",      11), # CAT
        rep("elkhorn",               6), # ELK
        rep("guadalupe_island",     10), # GUA
        rep("pacific_grove",        13), # HOP -> Pacific Grove PGR
        rep("laguna_beach",         13), # LB
        rep("point_dume",            5), # PD
        rep("santa_barbara",        13), # SB
        rep("san_clemente_island",  10), # SCL
        rep("la_jolla_san_diego",   13), # SD
        rep("tomales_bay",           1), # TB
        rep("redondo_beach",        10), # RB
        rep("santa_cruz_harbour",   10)  # SCH
      ), "coastal_gua_scl" = c(
        rep("bodega_bay",            5), # BB
        rep("big_creek",            13), # BIGC -> BCR
        rep("elkhorn",               6), # ELK
        rep("guadalupe_island",     10), # GUA
        rep("pacific_grove",        13), # HOP -> Pacific Grove PGR
        rep("laguna_beach",         13), # LB
        rep("point_dume",            5), # PD
        rep("santa_barbara",        13), # SB
        rep("san_clemente_island",  10), # SCL
        rep("la_jolla_san_diego",   13), # SD
        rep("tomales_bay",           1), # TB
        rep("redondo_beach",        10), # RB
        rep("santa_cruz_harbour",   10)  # SCH
      ), "coastal_isj" = c(
        rep("bodega_bay",            5), # BB
        rep("big_creek",            13), # BIGC -> BCR
        rep("elkhorn",               6), # ELK
        rep("pacific_grove",        13), # HOP -> Pacific Grove PGR
        rep("isla_san_jeronimo",    11), # ISJ
        rep("laguna_beach",         13), # LB
        rep("point_dume",            5), # PD
        rep("santa_barbara",        13), # SB
        rep("la_jolla_san_diego",   13), # SD
        rep("tomales_bay",           1), # TB
        rep("redondo_beach",        10), # RB
        rep("santa_cruz_harbour",   10)  # SCH
      ), "coastal_scl" = c(
        rep("bodega_bay",            5), # BB
        rep("big_creek",            13), # BIGC -> BCR
        rep("elkhorn",               6), # ELK
        rep("pacific_grove",        13), # HOP -> Pacific Grove PGR
        rep("laguna_beach",         13), # LB
        rep("point_dume",            5), # PD
        rep("santa_barbara",        13), # SB
        rep("san_clemente_island",  10), # SCL
        rep("la_jolla_san_diego",   13), # SD
        rep("tomales_bay",           1), # TB
        rep("redondo_beach",        10), # RB
        rep("santa_cruz_harbour",   10)  # SCH
      ), "gua_cat" = c(
        rep("catalina_island",      11), # CAT
        rep("guadalupe_island",     10)  # GUA
      ), "gua_isj" = c(
        rep("guadalupe_island",     10), # GUA
        rep("isla_san_jeronimo",    11)  # ISJ
      ), "gua_scl" =  c(
        rep("guadalupe_island",     10), # GUA
        rep("san_clemente_island",  10)  # SCL
      ), "isl" =  c(
        rep("catalina_island",      11), # CAT
        rep("guadalupe_island",     10), # GUA
        rep("isla_san_jeronimo",    11), # ISJ
        rep("san_clemente_island",  10)  # SCL
      ), "north" = c(
        rep("bodega_bay",            5), # BB
        rep("big_creek",            13), # BIGC -> BCR
        rep("elkhorn",               6), # ELK
        rep("pacific_grove",        13), # HOP -> Pacific Grove PGR
        rep("santa_barbara",        13), # SB
        rep("tomales_bay",           1), # TB
        rep("santa_cruz_harbour",   10)  # SCH
      ), "scl_isj" = c(
        rep("isla_san_jeronimo",    11), # ISJ
        rep("san_clemente_island",  10)  # SCL
      ), "south" =   c(
        rep("laguna_beach",         13), # LB
        rep("point_dume",            5), # PD
        rep("santa_barbara",        13), # SB
        rep("la_jolla_san_diego",   13), # SD
        rep("redondo_beach",        10) # RB
      )
    ) |>
      map(
        .f = \(x) x |> 
          factor(
              levels = c("big_creek", "bodega_bay", "catalina_island", "santa_cruz_harbour",
                 "guadalupe_island", "isla_san_jeronimo", "la_jolla_san_diego",
                 "laguna_beach", "pacific_grove", "point_dume", "tomales_bay",
                 "san_clemente_island", "santa_barbara",
                 "elkhorn", "redondo_beach")
          )
      )
  )

popmaps$names[[1]] <- "all"

saveRDS(popmaps, here("data", "popmaps.rds"))
```

### Convert all beds to vcfs

```{bash}
cd C:/Users/aoules/Desktop/R_projects/Surfperch_GenPop/plink2

bed_names=();
for f in *.bed; do
    bed_names+=("${f%.bed}");
done;

for bed in ${bed_names[@]}; do ./plink2 --bfile $bed --keep-allele-order --recode vcf --out $bed; done;
```

Coast *vs.* Gua and Cat
```{bash}
cd C:/Users/aoules/Desktop/R_projects/Surfperch_GenPop/plink2

./plink2 --bfile 8-Embiotoca_filtered --keep whitelist_coastal_gua_cat.txt --make-bed --out 8-Embiotoca_filtered_coastal_gua_cat

./plink2 --bfile 8-Embiotoca_filtered_coastal_gua_cat --keep-allele-order --recode vcf --out 8-Embiotoca_filtered_coastal_gua_cat
```

Coast *vs.* Gua and Scl
```{bash}
cd C:/Users/aoules/Desktop/R_projects/Surfperch_GenPop/plink2

./plink2 --bfile 8-Embiotoca_filtered --keep whitelist_coastal_gua_scl.txt --make-bed --out 8-Embiotoca_filtered_coastal_gua_scl

./plink2 --bfile 8-Embiotoca_filtered_coastal_gua_scl --keep-allele-order --recode vcf --out 8-Embiotoca_filtered_coastal_gua_scl
```

Coast *vs.* Gua, Cat and Scl
```{bash}
cd C:/Users/aoules/Desktop/R_projects/Surfperch_GenPop/plink2

./plink2 --bfile 8-Embiotoca_filtered --keep whitelist_coastal_gua_cat_scl.txt --make-bed --out 8-Embiotoca_filtered_coastal_gua_cat_scl

./plink2 --bfile 8-Embiotoca_filtered_coastal_gua_cat_scl --keep-allele-order --recode vcf --out 8-Embiotoca_filtered_coastal_gua_cat_scl
```

## pcadapt analyses

### All preanalysis to determine optimal K value

```{r}
for (i in 1:dim(popmaps)[1]) {
  pcadapt <- here("plink2", popmaps$bed_paths[[i]]) |> 
    read.pcadapt(type = "bed") |> 
    pcadapt(K = 10)
  
  pcadapt_screeplot(pcadapt) |> 
    ggsave(
      here("output", "plots", "pcadapt", paste0("pcadapt_", popmaps$names[[i]], "_screeplot.pdf")),
      plot = _,
      width = 10, height = 8
    )

  pca_plots <- PCA_plot(pcadapt, popmap = popmaps$maps[[i]], axis_one = 1, axis_two = 2) +
    PCA_plot(pcadapt, popmap = popmaps$maps[[i]], axis_one = 3, axis_two = 4) +
    PCA_plot(pcadapt, popmap = popmaps$maps[[i]], axis_one = 5, axis_two = 6) +
    PCA_plot(pcadapt, popmap = popmaps$maps[[i]], axis_one = 7, axis_two = 8) +
    plot_layout(design = "AB\nCD")
  
  ggsave(
    here("output", "plots", "pcadapt",
         paste0("pcadapt_", popmaps$names[[i]], "_PCA_1-8.pdf")),
    plot  = pca_plots,
    width = 10, height = 8
  )
}

# map2(bed_files$paths, bed_files$suffixes,
#      \(x, y) {
#        here("plink2", x) |> 
#          read.pcadapt(type = "bed") |> 
#          pcadapt(K = 20) |> 
#          \(z) {
#            z |> 
#              pcadapt_screeplot() |> 
#              ggsave(
#                here("output", "plots", paste0("pcadapt_", y, "_screeplot.pdf")),
#                plot = _,
#                width = 10, height = 8
#              )
#            for (i in 1:19) {
#              z |> plot(option = "scores", pop = popmap_lcwgs, i = i, j = i + 1)
#            }
#          }
#          
#      })
```

```{r}
popmaps <- popmaps |> mutate(K = c(6, 1, 1, 2, 3,
                                   3, 4, 5, 4, 3,
                                   3, 1, 1, 1, 3,
                                   3, 1, 2))
```

### All analyses with correct value of K

```{r}
for (i in 1:dim(popmaps)[1]) {
  here("plink2", popmaps$bed_paths[[i]]) |> 
    read.pcadapt(type = "bed") |> 
    pcadapt(K = popmaps$K[i]) |> 
    write_rds(
      file = here(
        "output",
        paste0("pcadapt_lcwgs", popmaps$names[[i]], "K", as.character(popmaps$K[i]), ".rds")
      )
    )
  
  pcadapt <- readRDS(
    here(
        "output",
        paste0("pcadapt_lcwgs", popmaps$names[[i]], "K", as.character(popmaps$K[i]), ".rds")
      )
  )

  plot(pcadapt, option = "qqplot") |> 
    ggsave(
      here("output", "plots", "pcadapt",
           paste0("pcadapt_", popmaps$names[[i]], "_qqplot.pdf")),
      plot  = _,
      width = 10, height = 8
    )
  
  png(here("output", "plots", "pcadapt",
           paste0("pcadapt_", popmaps$names[[i]], "_pvalues_hist.pdf")))

  pcadapt$pvalues |> hist(
    xlab   = "p-values",
    main   = NULL,
    breaks = 50,
    col    = "orange"
  )
  
  dev.off()
}
```

### Loading plots example

```{r}
#| label: LoadingsPlots

colnames(pcadapt_lcwgs$loadings) <- paste0("PC", seq(1, 6))

for (i in paste0("PC", seq(1, 6))) {
  ggsave(
    plot = pcadapt_lcwgs$loadings |>
      data.frame() |> 
      mutate(index = row_number()) |> 
      ggplot() +
      geom_point(aes_string(x = "index", y = i)) +
      theme_bw(),
    filename  = here(paste0("pcadapt_all_pops_K9_loadings_", i, ".png")),
    width     = 60,
    limitsize = FALSE
  )
}
```

## Outliers determination and annotation

### Load species Metadata

```{r}
EJA_annotations <- here("data", "EJA_annotations.gff") |> # Load annotated genome
  read.gff() |>
  as_tibble() |> 
  filter(type != "region")

chromosomes_info <- here("data", "JAKOON01_catalog", "sequence_report.tsv") |>  # Load misc inform
  read_tsv() |>
  select(c(`GenBank seq accession`, `RefSeq seq accession`))
```

#### All outliers

```{r}
read_write_locations <- tibble(
  read_files = list.files(here("output")) |> str_subset("pcadapt")
) |> 
  mutate(
    write_files = read_files |>
      str_replace("pcadapt", "EJA") |>
      str_replace(".rds", "_1E-2_outliers_annotations.csv")
  )

map2(
  read_write_locations$read_files, read_write_locations$write_files,
     \(x, y) {
       print(x)
       
       here("output", x) |>
         readRDS() |>
         Get_outliers(method = "bonferroni", pvalue_threshold = .01, minimize_length = FALSE) |> 
         Get_annotations(chrom_info = chromosomes_info, gff_annotation = EJA_annotations) |>
         Clean_annotations() |> 
         write_csv2(here("output", y))
     }
)
```

Summary is saved in `EJA_lcwgs_outliers_log.log`.

### For only one

```{r}
test <- here("output", "pcadapt_lcwgs_K9.rds") |>
  readRDS() |>
  Get_outliers(method = "bonferroni", pvalue_threshold = .001, minimize_length = FALSE) |>
  Get_annotations(chrom_info = chromosomes_info, gff_annotation = EJA_annotations) |>
  Clean_annotations() |> 
  write_csv2(here("output", "EJA_lcwgs_cat_isj_5E-2_outliers_annotations.csv"))
```

### Add Principal Components association to tables

```{r}
tibble(
  read_csv     = list.files(here("output")) |> str_subset("outliers_annotations"),
  read_pcadapt = list.files(here("output")) |> str_subset("pcadapt")
) |> 
  (\(x) {
    map2(
      x$read_csv, x$read_pcadapt,
      \(x, y) {
        here("output", x) |> 
          read_csv2() |> 
          inner_join(
            readRDS(file = here("data", "SNP_positions.rds")),
            by = join_by("GenBank seq accession" == "CHROM", "POS")
          ) |> 
          mutate(
            PC = here("output", y) |> read_rds() |> get.pc(list = rank) |> pull(PC)
          ) |> 
          select(-c(rank)) |> 
          write_csv2(file = here("output", sub(".csv", "_PC.csv", x)))
      }
    )
  })()
```

### Add Allele frequencies

#### Send-away code

```{r}
#| eval: false

EJA_gen <- readRDS(here("data", "EJA_lcwgs_gen.rds"))

EJA_allele_frequencies <- makefreq(EJA_gen)

EJA_allele_frequencies_tb <- EJA_allele_frequencies |>
    t() |>
    as_tibble(rownames = "POSITION") |>
    separate_wider_delim(POSITION, delim = "_", names = c("CHROM", "TBD", "POSALLELE")) |>
    separate_wider_delim(POSALLELE, delim = ".", names = c("POS", "ALLELE")) |>
    select(-c(TBD)) |>
    mutate(CHROM = paste0(CHROM, ".1"))

saveRDS(EJA_allele_frequencies_tb, here("output", "EJA_allele_frequencies_tb.rds"))
```

#### Add results to tables

```{r}
EJA_allele_freq <- readRDS(here("output", "EJA_allele_frequencies_tb.rds")) |> 
  filter(ALLELE == 0) |> 
  select(-ALLELE)

list.files(here("output")) |>
  str_subset("outliers_annotations_PC") |> 
  map(\(x) {
    here("output", x) |> 
      read_csv2() |> 
      left_join(
        EJA_allele_freq,
        by = join_by("GenBank seq accession" == "CHROM", "POS")
      ) |> 
      write_csv2(file = here("output", sub(".csv", "_allele_freq.csv", x)))
  })
```


### Get outliers fasta
#### Read genome
```{r}
lcwgs_catalog <- read.dna(
    here("data", "JAKOON01_catalog", "catalog.fa"),
    format       = "fasta",
    as.character = TRUE
  )

names(lcwgs_catalog) <- names(lcwgs_catalog) |>
  str_split(pattern = " ") |>
  map(\(x) x[1]) |>
  unlist()
```

#### Get corresponding read windows
```{r}
chromosomes_length <- read_tsv(here("data", "JAKOON01_catalog", "JAKOON01_contigs.tsv"))

pvalues_positions_filtered_dup_sequences <- pvalues_positions_filtered_dup |>
  mutate(
    sequences = row_number() |>
      map(
        \(x) lcwgs_catalog[[CHROM[[x]]]][Get_window(CHROM[[x]], POS[[x]])] |>
          paste(collapse = "") |>
          toupper()
      ) |> 
      unlist()
    )
```

#### Write to fasta files
```{r}
pvalues_positions_filtered_dup_sequences |>
  mutate(seq_name = paste0(">", CHROM, " POS: ", as.character(POS))) |>
  select(seq_name, sequences) |> 
  filter(row_number() %in% 1:200) |> 
  write.table(
    file      = here("output", "lcwgs_outliers_sequences_1.fa"),
    sep       = "\n",
    row.names = FALSE,
    col.names = FALSE,
    quote     = FALSE
  )

pvalues_positions_filtered_dup_sequences |>
  mutate(seq_name = paste0(">", CHROM, " POS: ", as.character(POS))) |>
  select(seq_name, sequences) |> 
  filter(row_number() %in% 201:400) |> 
  write.table(
    file      = here("output", "lcwgs_outliers_sequences_2.fa"),
    sep       = "\n",
    row.names = FALSE,
    col.names = FALSE,
    quote     = FALSE
  )

pvalues_positions_filtered_dup_sequences |>
  mutate(seq_name = paste0(">", CHROM, " POS: ", as.character(POS))) |>
  select(seq_name, sequences) |> 
  filter(row_number() %in% 401:456) |> 
  write.table(
    file      = here("output", "lcwgs_outliers_sequences_3.fa"),
    sep       = "\n",
    row.names = FALSE,
    col.names = FALSE,
    quote     = FALSE
  )
```

```{r}
rm(chromosomes_length,
   pvalues_positions_filtered_dup_sequences)
gc()
```

## Outliers Protein sequences for KEGG

### Get BLAST results

```{r}
pvalues_positions <- pvalues_positions |>
  mutate(Rank = paste0(CHROM, " POS: ", as.character(POS)))

lcwgs_EJA_outliers_blast_tib <- c("GZSEDPGT016-Alignment.xml",
                                  "GZSJHA6W016-Alignment.xml",
                                  "GZSMYB0J016-Alignment.xml") |> # "Single-file XML2" file from NCBI BLASTn output is expected
  here("data", "BLASTs") |>
  map( \(x) read_xml(x) |> XML_to_df()) |> 
  bind_rows() |>
  left_join(pvalues_positions)

rm(pvalues_positions)
```

#### Filter BLAST results

```{r}
lcwgs_EJA_outliers_blast_tib_filtered <- lcwgs_EJA_outliers_blast_tib |>
  filter(bit_score >= 80) |> 
  filter(!grepl("genome assembly", title)) |> 
  filter(!duplicated(Rank)) |> # Keep the first match for each locus
  filter(!duplicated(accession_number))
```

```{r}
write_csv2(
  lcwgs_EJA_outliers_blast_tib_filtered,
  file = here("output", "lcwgs_outliers_match.csv")
)
```

#### Get protein sequences from GenBank

```{r}
lcwgs_protein_sequences <- lcwgs_EJA_outliers_blast_tib_filtered |> Get_protein_sequences()
```

#### Save output as fasta file which can be sent to [blast KOALA](https://www.kegg.jp/blastkoala/).

```{r}
lcwgs_protein_sequences |> 
  mutate(accession_number = paste0("> ", accession_number)) |>
  write.table(
    file      = here("output", "lwcgs_EJA_outliers_protein_sequences.fa"),
    sep       = "\n",
    row.names = FALSE,
    col.names = FALSE,
    quote     = FALSE
  )
```

### Get BLAST results A. ocellaris

```{r}
pvalues_positions <- readRDS(
  file = here("data", "SNP_positions.rds")
) |> 
  mutate(
    pvalues = pcadapt_lcwgs_coast$pvalues,
    logpvalues = Get_pvalues(pcadapt_lcwgs_coast)
  ) |>
  mutate(Rank = paste0(CHROM, " POS: ", as.character(POS)))
```

```{r}
lcwgs_EJA_outliers_blast_A_ocellaris_tib <- c("HFHS4UE9013-Alignment.xml",
                                              "HFHRYX38013-Alignment.xml",
                                              "HFHSG8SF016-Alignment.xml") |> # "Single-file XML2" file from NCBI BLASTn output is expected
  here("data", "BLASTs") |>
  map( \(x) read_xml(x) |> XML_to_df()) |> 
  bind_rows() |>
  left_join(pvalues_positions)

rm(pvalues_positions)
```

```{r}
lcwgs_EJA_outliers_blast_A_ocellaris_tib_filtered <- lcwgs_EJA_outliers_blast_A_ocellaris_tib |>
  filter(bit_score >= 80) |> 
  filter(!grepl("genome assembly", title)) |> 
  filter(!duplicated(Rank)) |> # Keep the first match for each locus
  filter(!duplicated(accession_number))

lcwgs_EJA_outliers_blast_A_ocellaris_tib_filtered |>
  write.csv2(here("output", "lcwgs_outliers_match_A_ocellaris.csv"))
```

# Outliers with `outFLANK`

## Load data and convert to format:

```{r}
#| echo: false

Vectorize(convert_to_outflank)(
  vcf_path  = here("plink2", popmaps$vcf_paths),
  popmap    = popmaps$maps,
  path_save = here(
    "data",
    paste0("8-Embiotoca_filtered_", popmaps$names,"_outflank.rds")
  )
)
```

## Compute Fst and He

```{r}
for (file in list.files(here("data"), pattern = "_outflank.rds$")) {
  if (
    !file.exists(
      here(
          "data",
          str_replace(file, pattern = "outflank.rds", replacement = "HeFst.rds")
      )
    )
  ) {
    print(paste0("Processing ", file))
    
    tryCatch({
      here("data", file) |> 
        readRDS() |> 
        (\(x) MakeDiploidFSTMat(
          t(x$G),
          locusNames = x$position,
          popNames   = x$pop
        ))() |> 
        saveRDS(
          here(
            "data",
            str_replace(file, pattern = "outflank.rds", replacement = "HeFst.rds")
          )
        )
    }, error = function(e){cat("ERROR :",conditionMessage(e), "\n")})

  }
}
```

## Plot FstHe

```{r}
for (file in list.files(here("data"), pattern = "HeFst.rds$")) {
  if (!file.exists(here("output", "plots",
                    paste0("Fst_He_",
                           file |>
                             str_remove(pattern = "8-Embiotoca_filtered_") |>
                             str_remove(pattern = "_HeFst.rds"),
                           ".png")))) {
    print(paste0("Plotting ", file))
    
    ggsave(
      plot = ggplot(readRDS(here("data", file))) +
        geom_point(aes(x = He, y = FST), alpha = .01) +
        labs(x = "Heterozygosity", y = "Fst") +
        theme_classic(),
      filename = here("output", "plots",
                      paste0("Fst_He_",
                             file |>
                               str_remove(pattern = "8-Embiotoca_filtered_") |>
                               str_remove(pattern = "_HeFst.rds"),
                             ".png")),
      width  = 8,
      height = 4
    )
  }
}
```

```{r}
plot(EJA_Fst$FST, EJA_Fst$FSTNoCorr, col = alpha("black", alpha = .01))
abline(0, 1)
```

## Coast *vs.* GUA *vs.* CAT

```{r}
 here("data", "8-Embiotoca_filtered_coastal_gua_cat_outflank.rds") |> 
        readRDS() |> 
        (\(x) MakeDiploidFSTMat(
          t(x$G),
          locusNames = x$position,
          popNames   = x$pop
        ))() |> 
        saveRDS(
          here(
            "data",
            str_replace("8-Embiotoca_filtered_coastal_gua_cat_outflank.rds", pattern = "outflank.rds", replacement = "HeFst.rds")
          )
        )
```

## Coast *vs.* GUA *vs.* SCL

```{r}
 here("data", "8-Embiotoca_filtered_coastal_gua_scl_outflank.rds") |> 
        readRDS() |> 
        (\(x) MakeDiploidFSTMat(
          t(x$G),
          locusNames = x$position,
          popNames   = x$pop
        ))() |> 
        saveRDS(
          here(
            "data",
            str_replace("8-Embiotoca_filtered_coastal_gua_scl_outflank.rds", pattern = "outflank.rds", replacement = "HeFst.rds")
          )
        )
```

## Coast *vs.* GUA *vs.* CAT *vs.* SCL

```{r}
 here("data", "8-Embiotoca_filtered_coastal_gua_cat_scl_outflank.rds") |> 
        readRDS() |> 
        (\(x) MakeDiploidFSTMat(
          t(x$G),
          locusNames = x$position,
          popNames   = x$pop
        ))() |> 
        saveRDS(
          here(
            "data",
            str_replace("8-Embiotoca_filtered_coastal_gua_cat_scl_outflank.rds", pattern = "outflank.rds", replacement = "HeFst.rds")
          )
        )
```

# Outliers with `bayscan`

```{r}
library(hierfstat)
library(radiator)

# read_csv2(here("data", "individuals_coordinates.csv")) |> 
#   select(c(Indiv, Localisation)) |> 
#   rename(INDIVIDUALS = Indiv, STRATA = Localisation) |> 
#   write_tsv(here("data", "population_map_bsc.txt"))

EJA_geste <- genomic_converter(
  data     = here("data", "8-Embiotoca_filtered.vcf"),
  strata   = here("data", "population_map_bsc.txt"),
  output   = c("bayescan"),
  filename = "8-Embiotoca_filtered_outflank.geste",
  parallel.core = 1
)
```