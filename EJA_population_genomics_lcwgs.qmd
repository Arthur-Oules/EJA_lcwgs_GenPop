---
title: "EJA Population Genomics Low coverage"
author: "Arthur OulÃ¨s"
format: html
editor: source
---
# Load packages

```{r}
#| label: LoadPackages
#| echo: false

c("here", "tidyverse",
  "pcadapt", "vcfR", "adegenet", "ape", "LEA", "dartR",
  "rentrez", "xml2") |>
  lapply(library, character.only = TRUE)
```

# Load data analysis functions
```{r}
#| label: LoadTidy

source(here("functions", "lcwgs_tidy_functions.R"))
```

# pcadapt analysis

## All populations

### Convert vcf to bed file using plink2
```{bash}
cd C:/Users/aoules/Desktop/R_projects/Surfperch_GenPop/plink2

./plink2 --vcf 8-Embiotoca_filtered.vcf.gz --make-bed --out 8-Embiotoca_filtered
```

### Preanalysis to determine optimal K value
```{r}
#| label: PreAnalysis

EJA_lcwgs <- read.pcadapt(
  here_d_lcwgs("8-Embiotoca_filtered.bed"),
  type = "bed"
)

pcadapt(input = EJA_lcwgs, K = 20) |>
  plot(option = "screeplot")
```

K = 4 seems correct

### Analysis using K = 4
```{r}
#| label: pcadapt

popmap_lcwgs <- c(
  rep("bodega_bay", 5), # BB
  rep("big_creek", 13), # BIGC -> BCR
  rep("catalina_island", 11), # CAT
  rep("elkhorn", 6), # ELK
  rep("guadalupe_island", 10), # GUA
  rep("pacific_grove", 13), # HOP -> Pacific Grove PGR 
  rep("isla_san_jeronimo", 11), # ISJ
  rep("laguna_beach", 13), # LB
  rep("point_dume", 5), # PD
  rep("santa_barbara_island", 13), # SB
  rep("san_clemente_island", 10), # SCL
  rep("la_jolla_san_diego", 13), # SD
  rep("tomales_bay", 1), # TB
  rep("redondo_beach", 10), # RB
  rep("santa_cruz_harbour", 10) # SCH
)

pcadapt_lcwgs <- EJA_lcwgs |> pcadapt(K = 4)
```

```{r}
#| eval: false

write_rds(pcadapt_lcwgs, file = here("output", "pcadapt_lcwgs.rds"))
```

### Exploratory plots
```{r}
#| label: ExploPlots

pcadapt_lcwgs |> plot(option = "scores", pop = popmap_lcwgs, i = 1, j = 2)
pcadapt_lcwgs |> plot(option = "scores", pop = popmap_lcwgs, i = 2, j = 3)
pcadapt_lcwgs |> plot(option = "scores", pop = popmap_lcwgs, i = 3, j = 4)

pcadapt_lcwgs |> plot(option = "qqplot")

pcadapt_lcwgs |> plot(option = "manhattan")

pcadapt_lcwgs$pvalues |> hist(
  xlab   = "p-values",
  main   = NULL,
  breaks = 50,
  col    = "orange"
)
```

## Generating whitelist
```{r}
#| label: Whitelist
#| eval: false

Indiv_list <- here_d_lcwgs("EJA_lcwgs_gt.RDS") |>
  read_rds() |>
  _$Indiv

Indiv_list |>
  write_rds(file = here_d_lcwgs("Individual_list.rds"))
```

```{r}
#| label: SaveWhitelist
#| eval: false

Indiv_list |> 
  unique() |>
  {\(x) {
    x[
      !(grepl(pattern = "SCL", x = x) |
        grepl(pattern = "GUA", x = x) |
        grepl(pattern = "CAT", x = x))
    ]
    }}() |> 
  write_lines(here("plink2", "whitelist_pipi.txt"))
```

## Excluding islanders
### Generating bed file
```{bash}
cd C:/Users/aoules/Desktop/R_projects/Surfperch_GenPop/plink2

./plink2 --bfile 8-Embiotoca_filtered --keep whitelist.txt --make-bed --out 8-Embiotoca_filtered_whitelisted
```

### Preanalysis to determine optimal K value
```{r}
#| label: CoastPreAnalysis
EJA_lcwgs_coast <- read.pcadapt(
  here_d_lcwgs("8-Embiotoca_filtered_whitelisted.bed"),
  type = "bed"
)

pcadapt(input = EJA_lcwgs_coast, K = 20) |> plot(option = "screeplot")
```

K = 3 seems correct

### Analysis using K = 3
```{r}
#| label: Coastpcadapt

popmap_lcwgs_coast <- c(
  rep("bodega_bay",            5), # BB
  rep("big_creek",            13), # BIGC -> BCR
  rep("elkhorn",               6), # ELK
  rep("pacific_grove",        13), # HOP -> Pacific Grove PGR
  rep("isla_san_jeronimo",    11), # ISJ
  rep("laguna_beach",         13), # LB
  rep("point_dume",            5), # PD
  rep("santa_barbara_island", 13), # SB
  rep("la_jolla_san_diego",   13), # SD
  rep("tomales_bay",           1), # TB
  rep("redondo_beach",        10), # RB
  rep("santa_cruz_harbour",   10)  # SCH
)

pcadapt_lcwgs_coast <- EJA_lcwgs_coast |> pcadapt(K = 3)
```

```{r}
#| eval: false

write_rds(pcadapt_lcwgs_coast, file = here("output", "pcadapt_lcwgs_coast.rds"))
```

### Associated exploratory plots
```{r}
#| label: CoastExploPlots

coast_PCA_1_2 <- pcadapt_lcwgs_coast |>
  plot(option = "scores", pop = popmap_lcwgs_coast, i = 1, j = 2) +
  theme_minimal()

save_open_plot(
  here("output", "plots", "lcwgs", "coast_PCA_1_2.pdf"),
  plot   = coast_PCA_1_2,
  width  = 10,
  height = 8
)

coast_PCA_2_3 <- pcadapt_lcwgs_coast |>
  plot(option = "scores", pop = popmap_lcwgs_coast, i = 2, j = 3) +
  theme_minimal()

save_open_plot(
  here("output", "plots", "lcwgs", "coast_PCA_2_3.pdf"),
  plot   = coast_PCA_2_3,
  width  = 10,
  height = 8
)

pcadapt_lcwgs_coast |> plot(option = "qqplot") + theme_minimal()

coast_manhattan <- pcadapt_lcwgs_coast |>
  plot(option = "manhattan") +
  theme_minimal()

save_open_plot(
  here("output", "plots", "lcwgs", "coast_manhattan.pdf"),
  plot   = coast_manhattan,
  width  = 16,
  height = 4
)

pcadapt_lcwgs_coast$pvalues |> hist(
  xlab   = "p-values",
  main   = NULL,
  breaks = 50,
  col    = "orange"
)
```

```{r}
#| label: CoastMemclean

rm(EJA_lcwgs_coast)
```

## Only insular
### Generating bed file
```{bash}
cd C:/Users/aoules/Desktop/R_projects/Surfperch_GenPop/plink2

./plink2 --bfile 8-Embiotoca_filtered --remove whitelist.txt --make-bed --out 8-Embiotoca_filtered_blacklisted
```

### Preanalysis to determine optimal K value
```{r}
#| label: IslPreAnalysis

EJA_lcwgs_islands <- read.pcadapt(
  here_d_lcwgs("8-Embiotoca_filtered_blacklisted.bed"),
  type = "bed"
)

pcadapt(input = EJA_lcwgs_islands, K = 2) |> plot(option = "screeplot")
```

### Analysis using K = 2
```{r}
#| label: Islpcadapt

popmap_lcwgs_islands <- c(
  rep("catalina_island", 11), # CAT
  rep("guadalupe_island", 10), # GUA
  rep("san_clemente_island", 10) # SCL
)

pcadapt_lcwgs_islands <- EJA_lcwgs_islands |> pcadapt(K = 2)
```

```{r}
#| eval: false

write_rds(pcadapt_lcwgs_islands, file = here("output", "pcadapt_lcwgs_islands.rds"))
```

### Associated exploratory plots

```{r}
#| label: IslExploPlots

islands_PCA_1_2 <- pcadapt_lcwgs_islands |>
  plot(option = "scores", pop = popmap_lcwgs_islands, i = 1, j = 2) +
  theme_minimal()

save_open_plot(
  here("output", "plots", "lcwgs", "islands_PCA_1_2.pdf"),
  plot   = islands_PCA_1_2,
  width  = 10,
  height = 8
)

pcadapt_lcwgs_islands |>
  plot(option = "qqplot") +
  theme_minimal()

islands_manhattan <- pcadapt_lcwgs_islands |>
  plot(option = "manhattan") +
  theme_minimal()

save_open_plot(
  here("output", "plots", "lcwgs", "islands_manhattan.pdf"),
  plot   = islands_manhattan,
  width  = 16,
  height = 4
)

pcadapt_lcwgs_islands$pvalues |> hist(
  xlab   = "p-values",
  main   = NULL,
  breaks = 50,
  col    = "orange"
)
```

## San Diego vs Santa Cruz

```{r}
#| label: SaveWhitelist
#| eval: false

Indiv_list <- read_rds(file = here_d_lcwgs("Individual_list.rds"))

Indiv_list |> 
  unique() |>
  {\(x) {
    x[
      (grepl(pattern = "SCH", x = x) |
       grepl(pattern = "SD", x = x))
    ]
    }}() |> 
  write_lines(here("plink2", "whitelist_SD_SC.txt"))
rm(Indiv_list)
```

```{bash}
cd C:/Users/aoules/Desktop/R_projects/Surfperch_GenPop/plink2

./plink2 --bfile 8-Embiotoca_filtered --keep whitelist_SD_SC.txt --make-bed --out 8-Embiotoca_filtered_SD_SC
```

```{r}
#| label: PreAnalysisSDSC

EJA_lcwgs_SD_SC <- read.pcadapt(
  here("plink2", "8-Embiotoca_filtered_SD_SC.bed"),
  type = "bed"
)

pcadapt(input = EJA_lcwgs_SD_SC, K = 20) |>
  plot(option = "screeplot")
```

K = 4 seems correct

```{r}
#| label: pcadapt

popmap_lcwgs_SD_SC <- c(
  rep("la_jolla_san_diego", 13), # SD
  rep("santa_cruz_harbour", 10) # SCH
)

pcadapt_lcwgs_SD_SC <- EJA_lcwgs_SD_SC |> pcadapt(K = 1)
```


```{r}
#| label: ExploPlots

pcadapt_lcwgs_SD_SC |> plot(option = "qqplot")

pcadapt_lcwgs_SD_SC |> plot(option = "manhattan")

pcadapt_lcwgs_SD_SC$pvalues |> hist(
  xlab   = "p-values",
  main   = NULL,
  breaks = 50,
  col    = "orange"
)
```

# Outliers

## Get outliers sequences

### Prepare all data
```{r}
EJA_lcwgs_vcf <- read_rds(here_d_lcwgs("EJA_lcwgs_vcfR.RDS"))
```

```{r}
#| label: GenomeMap
#| echo: false

SNP_positions <- EJA_lcwgs_vcf |>
  getFIX() |>
  as_tibble() |>
  select(CHROM, POS) |>
  mutate(POS = as.numeric(POS))

saveRDS(SNP_positions, file = here_d_lcwgs("SNP_positions.rds"))

rm(EJA_lcwgs_vcf, SNP_positions)
```

### Read genome
```{r}
lcwgs_catalog <- read.dna(
    here_d_lcwgs("JAKOON01_catalog", "catalog.fa"),
    format = "fasta",
    as.character = TRUE
  )

names(lcwgs_catalog) <- names(lcwgs_catalog) |>
  str_split(pattern = " ") |>
  map(\(x) x[1]) |>
  unlist()
```

### Adjusted pvalues

```{r}
alpha <- 0.1
outliers <- which(padj < alpha)
length(outliers)
```

### Get pvalues map from coastal individuals analysis
```{r}
pcadapt_lcwgs_coast <- readRDS(here("output", "pcadapt_lcwgs_coast.rds"))

pvalues_positions <- readRDS(
  file = here_d_lcwgs("SNP_positions.rds")
) |> 
  select(-c(lab_position, coloured, rank)) |> 
  mutate(
    pvalues    = pcadapt_lcwgs_coast$pvalues,
    logpvalues = Get_pvalues(pcadapt_lcwgs_coast)
  )

pvalues_positions_filtered <- pvalues_positions |> 
  filter(is.na(pvalues) == FALSE) |> 
  filter(logpvalues >= 200)

pvalues_positions_filtered_dup <- pvalues_positions_filtered |> 
  mutate(dist = c(0, diff(POS))) |> 
  filter(dist >= 500) |>
  select(-c(dist))
  
```

### Get corresponding read windows
```{r}
chromosomes_length <- read_tsv(here_d_lcwgs("JAKOON01_catalog", "JAKOON01_contigs.tsv"))

pvalues_positions_filtered_dup_sequences <- pvalues_positions_filtered_dup |>
  mutate(
    sequences = row_number() |>
      map(
        \(x) lcwgs_catalog[[CHROM[[x]]]][Get_window(CHROM[[x]], POS[[x]])] |>
          paste(collapse = "") |>
          toupper()
      ) |> 
      unlist()
    )
```

### Write to fasta files
```{r}
pvalues_positions_filtered_dup_sequences |>
  mutate(seq_name = paste0(">", CHROM, " POS: ", as.character(POS))) |>
  select(seq_name, sequences) |> 
  filter(row_number() %in% 1:200) |> 
  write.table(
    file      = here("output", "lcwgs_outliers_sequences_1.fa"),
    sep       = "\n",
    row.names = FALSE,
    col.names = FALSE,
    quote     = FALSE
  )

pvalues_positions_filtered_dup_sequences |>
  mutate(seq_name = paste0(">", CHROM, " POS: ", as.character(POS))) |>
  select(seq_name, sequences) |> 
  filter(row_number() %in% 201:400) |> 
  write.table(
    file      = here("output", "lcwgs_outliers_sequences_2.fa"),
    sep       = "\n",
    row.names = FALSE,
    col.names = FALSE,
    quote     = FALSE
  )

pvalues_positions_filtered_dup_sequences |>
  mutate(seq_name = paste0(">", CHROM, " POS: ", as.character(POS))) |>
  select(seq_name, sequences) |> 
  filter(row_number() %in% 401:456) |> 
  write.table(
    file      = here("output", "lcwgs_outliers_sequences_3.fa"),
    sep       = "\n",
    row.names = FALSE,
    col.names = FALSE,
    quote     = FALSE
  )
```

```{r}
rm(chromosomes_length,
   pvalues_positions, pvalues_positions_filtered,
   pvalues_positions_filtered_dup_sequences)
gc()
```

## Extract outliers annotations from ncbi genome annotations

### Load external info

```{r}
EJA_annotations <- here_d_lcwgs("EJA_annotations.gff") |>
  read.gff() |>
  as_tibble()

chromosomes_info <- here_d_lcwgs("JAKOON01_catalog", "sequence_report.tsv") |> 
  read_tsv() |>
  select(c(`GenBank seq accession`, `RefSeq seq accession`))
```

### Get annotations

```{r}
pvalues_positions_filtered_dup_annotations <- pvalues_positions_filtered_dup |>
  Get_annotations(
    chrom_info     = chromosomes_info,
    gff_annotation = EJA_annotations
  )
```

### Memory cleanup

```{r}
rm(EJA_annotations, chromosomes_info, pvalues_positions_filtered_dup)
gc()
```

### Sort and filter info

```{r}
pvalues_positions_filtered_dup_annotations_genes <- pvalues_positions_filtered_dup_annotations |> 
  unnest(annotation) |> 
  filter(grepl("ID=gene", annotation)) |> 
  mutate(
    annotation_ID          = annotation |>
      str_split_i(pattern = ";", i = 1) |> 
      str_remove(pattern = "ID="),
    annotation_description = annotation |>
      str_split_i(pattern = ";", i = 4) |> 
      str_remove(pattern = "description=")
  ) |> 
  select(-c(annotation)) |> 
  distinct(annotation_ID, .keep_all = TRUE)

pvalues_positions_filtered_dup_annotations_rnas <- pvalues_positions_filtered_dup_annotations |> 
  unnest(annotation) |> 
  filter(grepl("ID=rna", annotation)) |> 
  mutate(
    annotation_ID      = annotation |>
      str_split_i(pattern = ";", i = 1) |> 
      str_remove(pattern = "ID="),
    annotation_product = annotation |>
      str_match("product=\\s*(.*?)\\s*;") |> 
      _[, 2]
  ) |> 
  select(-c(annotation)) |> 
  distinct(annotation_ID, .keep_all = TRUE)

pvalues_positions_filtered_dup_annotations_exons <- pvalues_positions_filtered_dup_annotations |> 
  unnest(annotation) |> 
  filter(grepl("ID=exon", annotation)) |> 
  mutate(
    annotation_ID      = annotation |>
      str_split_i(pattern = ";", i = 1) |> 
      str_remove(pattern = "ID="),
    annotation_gene    = annotation |>
      str_match("gene=\\s*(.*?)\\s*;") |> 
      _[, 2],
    annotation_product = annotation |>
      str_match("product=\\s*(.*?)\\s*;") |> 
      _[, 2]
  ) |> 
  select(-c(annotation)) |> 
  distinct(annotation_ID, .keep_all = TRUE)

pvalues_positions_filtered_dup_annotations_cds <- pvalues_positions_filtered_dup_annotations |> 
  unnest(annotation) |> 
  filter(grepl("ID=cds", annotation)) |> 
  mutate(
    annotation_ID      = annotation |>
      str_split_i(pattern = ";", i = 1) |> 
      str_remove(pattern = "ID="),
    annotation_gene    = annotation |>
      str_match("gene=\\s*(.*?)\\s*;") |> 
      _[, 2],
    annotation_product = annotation |>
      str_match("product=\\s*(.*?)\\s*;") |> 
      _[, 2]
  ) |> 
  select(-c(annotation)) |> 
  distinct(annotation_ID, .keep_all = TRUE)

pvalues_positions_filtered_dup_annotations_all <- bind_rows(
  pvalues_positions_filtered_dup_annotations_genes,
  pvalues_positions_filtered_dup_annotations_rnas,
  pvalues_positions_filtered_dup_annotations_exons,
  pvalues_positions_filtered_dup_annotations_cds
) |> 
  mutate(
    annotation_type        = annotation_ID |> str_split_i(pattern = "-", i = 1),
    annotation_ID          = annotation_ID |> str_split_i(pattern = "-", i = 2),
    annotation_description = annotation_description |>
      str_remove_all(pattern = "%2C"),
    annotation_product     = annotation_product |>
      str_remove_all(pattern = "%2C")
  ) |>
  select(
    c("GenBank seq accession", "POS",
      "RefSeq seq accession", "annotation_type", "annotation_ID",
      "annotation_description", "annotation_product", "annotation_gene",
      "pvalues", "logpvalues")
  ) |> 
  arrange(pvalues, `GenBank seq accession`, POS)
```

### Save as file and cleanup

```{r}
pvalues_positions_filtered_dup_annotations_all |>
  write_csv2(here("output", "lcwgs_EJA_outliers_annotations.csv"))

rm(pvalues_positions_filtered_dup_annotations_genes,
   pvalues_positions_filtered_dup_annotations_rnas,
   pvalues_positions_filtered_dup_annotations_exons,
   pvalues_positions_filtered_dup_annotations_cds)
```

## Get BLAST results

```{r}
pvalues_positions <- pvalues_positions |>
  mutate(Rank = paste0(CHROM, " POS: ", as.character(POS)))

lcwgs_EJA_outliers_blast_tib <- c("GZSEDPGT016-Alignment.xml",
                                  "GZSJHA6W016-Alignment.xml",
                                  "GZSMYB0J016-Alignment.xml") |> # "Single-file XML2" file from NCBI BLASTn output is expected
  here_d_lcwgs() |>
  map( \(x) read_xml(x) |> XML_to_df()) |> 
  bind_rows() |>
  left_join(pvalues_positions)

rm(pvalues_positions)
```
### Filter BLAST results

```{r}
lcwgs_EJA_outliers_blast_tib_filtered <- lcwgs_EJA_outliers_blast_tib |>
  filter(bit_score >= 80) |> 
  filter(!grepl("genome assembly", title)) |> 
  filter(!duplicated(Rank)) |> # Keep the first match for each locus
  filter(!duplicated(accession_number))
```

```{r}
write_csv2(
  lcwgs_EJA_outliers_blast_tib_filtered,
  file = here("output", "lcwgs_outliers_match.csv")
)
```

### Get protein sequences from GenBank
```{r}
lcwgs_protein_sequences <- lcwgs_EJA_outliers_blast_tib_filtered |> Get_protein_sequences()
```

### Save output as fasta file which can be sent to [blast KOALA](https://www.kegg.jp/blastkoala/).

```{r}
lcwgs_protein_sequences |> 
  mutate(accession_number = paste0("> ", accession_number)) |>
  write.table(
    file      = here("output", "lwcgs_EJA_outliers_protein_sequences.fa"),
    sep       = "\n",
    row.names = FALSE,
    col.names = FALSE,
    quote     = FALSE
  )
```

## Get BLAST results A. ocellaris

```{r}
pvalues_positions <- readRDS(
  file = here_d_lcwgs("SNP_positions.rds")
) |> 
  mutate(
    pvalues = pcadapt_lcwgs_coast$pvalues,
    logpvalues = Get_pvalues(pcadapt_lcwgs_coast)
  ) |>
  mutate(Rank = paste0(CHROM, " POS: ", as.character(POS)))
```


```{r}
lcwgs_EJA_outliers_blast_A_ocellaris_tib <- c("HFHS4UE9013-Alignment.xml",
                                              "HFHRYX38013-Alignment.xml",
                                              "HFHSG8SF016-Alignment.xml") |> # "Single-file XML2" file from NCBI BLASTn output is expected
  here_d_lcwgs() |>
  map( \(x) read_xml(x) |> XML_to_df()) |> 
  bind_rows() |>
  left_join(pvalues_positions)

rm(pvalues_positions)
```

```{r}
lcwgs_EJA_outliers_blast_A_ocellaris_tib_filtered <- lcwgs_EJA_outliers_blast_A_ocellaris_tib |>
  filter(bit_score >= 80) |> 
  filter(!grepl("genome assembly", title)) |> 
  filter(!duplicated(Rank)) |> # Keep the first match for each locus
  filter(!duplicated(accession_number))

lcwgs_EJA_outliers_blast_A_ocellaris_tib_filtered |> write.csv2(here("output", "lcwgs_outliers_match_A_ocellaris.csv"))
```


# Admixture analysis

## Convert data to ped format for LEA import using plink2
```{bash}
cd C:/Users/aoules/Desktop/R_projects/Surfperch_GenPop/plink2
./plink2 --vcf 8-Embiotoca_filtered.vcf.gz --export ped --out 8-Embiotoca_filtered
```

## Read and convert data
```{r}
#| label: VcfConvert
#| eval: false

EJA_lcwgs_vcf <- here_d_lcwgs("8-Embiotoca_filtered.vcf.gz") |> read.vcfR()

EJA_lcwgs_vcf |> here_d_lcwgs("EJA_lcwgs_vcfR.RDS") |> write_rds()

EJA_lcwgs_vcf |>
  extract_gt_tidy() |>
  write_rds(here_d_lcwgs("EJA_lcwgs_gt.RDS"))

ped2geno(
  input.file  = here("plink2", "8-Embiotoca_filtered.ped"),
  output.file = here_d_lcwgs("8-Embiotoca_filtered.geno")
)

rm(EJA_lcwgs_vcf)
```

```{r}
#| label: LoadData

EJA_lcwgs_vcf <- read_rds(here_d_lcwgs("EJA_lcwgs_vcfR.RDS"))

EJA_lcwgs_gt <- read_rds(here_d_lcwgs("EJA_lcwgs_gt.RDS"))
```

## Run analysis
```{r}
#| label: snmfAnalysisSingle

snmf_analysis <- snmf(
  here_d_lcwgs("8-Embiotoca_filtered.geno"),
  project = "continue",
  K       = 5:8,
  entropy = TRUE
)
```

## Plot cross entropy to chose value of K
```{r}
#| label: snmfSinglePlot

plot(snmf_analysis)
```
K = 6 has the minimum cross-entropy.

## Rerun multiple times with K = 6
```{r}
#| label: snmfAnalysisMulti

snmf_analysis <- snmf(
  here_d_lcwgs("8-Embiotoca_filtered.geno"),
  project     = "continue",
  repetitions = 100,
  K           = 6,
  entropy     = TRUE
)
```

## Plot results for K = 6
```{r}
#| label: snmfAnalysisMultiMplot

barchart(
  snmf_analysis,
  K         = 6,
  run       = which.min(cross.entropy(snmf_analysis, K = 6)),
  col       = viridis(n = 6, option = "turbo"),
  sort.by.Q = FALSE
)
```

# Isolation by Distance

## Euclidean distance

### Convert to genlight object for gl.ibd calculations
```{r}
#| echo: false

lcwgs_gl <- here_d_lcwgs("8-Embiotoca_filtered.vcf.gz") |>
  gl.read.vcf()

lcwgs_gl@other$latlon <- tibble(
  Indiv = lcwgs_gl@ind.names,
  Pop   = lcwgs_gl@pop
  ) |> 
  left_join(
    y = read_csv2(here_d_lcwgs("low_coverage_sampling.csv")) |>
      select(Popmap, Latitude, Longitude)
  ) |>
  rename(lat = Latitude, lon = Longitude) |> 
  as.data.frame()

lcwgs_gl@pop <- factor(popmap_lcwgs)

lcwgs_gl |> saveRDS(file = here_d_lcwgs("Embiotoca_lcwgs_gl.rds"))
```

### Loading data from IBD.R analysis on cluster
```{r}
IBD <- readRDS(here("output", "Embiotocidae_lcwgs_IBD.rds"))
```

### Results
```{r}
vegan::mantel(IBD$Dgen, IBD$Dgeo)

mantel_plot(IBD$Dgeo, IBD$Dgen)
```

## PCA distances

```{r}
pcadapt_lcwgs <- read_rds(here("output", "pcadapt_lcwgs.rds"))
popmap_lcwgs <- popmap_lcwgs <- c(
  rep("bodega_bay", 5), # BB
  rep("big_creek", 13), # BIGC -> BCR
  rep("catalina_island", 11), # CAT
  rep("elkhorn", 6), # ELK
  rep("guadalupe_island", 10), # GUA
  rep("pacific_grove", 13), # HOP -> Pacific Grove PGR 
  rep("isla_san_jeronimo", 11), # ISJ
  rep("laguna_beach", 13), # LB
  rep("point_dume", 5), # PD
  rep("santa_barbara_island", 13), # SB
  rep("san_clemente_island", 10), # SCL
  rep("la_jolla_san_diego", 13), # SD
  rep("tomales_bay", 1), # TB
  rep("redondo_beach", 10), # RB
  rep("santa_cruz_harbour", 10) # SCH
)
```

```{r}
PCA_distance <- tibble(
  PCA1 = pcadapt_lcwgs$scores[, 1],
  PCA2 = pcadapt_lcwgs$scores[, 2],
  PCA3 = pcadapt_lcwgs$scores[, 3],
  PCA4 = pcadapt_lcwgs$scores[, 4],
  pop  = popmap_lcwgs
) |> 
  group_by(pop) |> 
  summarise(
    PCA1_popmean = mean(PCA1),
    PCA2_popmean = mean(PCA2),
    PCA3_popmean = mean(PCA3),
    PCA4_popmean = mean(PCA4)
  ) |> 
  dist()

vegan::mantel(PCA_distance, IBD$Dgeo)

mantel_plot(IBD$Dgeo, PCA_distance)
```

## Manual geographic barrier distance computing

### Computing barrier distance matrix
```{r}
water <- ne_states(
  country     = c("united states of america", "mexico"),
  returnclass = "sv"
) |>
  crop(y = ext(-124,-113, 28.5, 38.5)) |>
  rasterize(y = rast(ext(-124, -113, 28.5, 38.5), ncols = 1100, nrows = 1000)) |> 
  subst(from = NA, to = 2) |> 
  subst(from = 1, to = NA) |> 
  subst(from = 2, to = 1)

barrier_distance <- function(from, to) {
  background <- water
  background[from] <- 2
  grid_map <- gridDist(background, target = 2)
  extract(grid_map, to) |> as.numeric()
}

geo_dist_cells <- here_d_lcwgs("low_coverage_sampling.csv") |> 
  read_csv2(show_col_types = FALSE) |> 
  select(c(Code, Longitude, Latitude, Popmap)) |> 
  rename(pop = Popmap) |> 
  mutate(
    pop  = as.factor(pop),
    Code = as.factor(Code)
  ) |>
  arrange(pop) |> 
  (\(x) mutate(x,
               cell_id = cellFromXY(water, as.matrix(x[, 2:3]))))() |> 
  pull(cell_id, name = pop)


barrier_dist_mat <- proxy::dist(geo_dist_cells, method = barrier_distance)

rm(geo_dist_cells)
```

### Test if Euclidean and barrrier geographic distances are different
```{r}
mantel_plot(IBD$Dgeo, barrier_dist_mat)
```

### Correlation btw gl.ibd and barrier distances
```{r}
vegan::mantel(barrier_dist_mat, IBD$Dgen)
mantel_plot(barrier_dist_mat, IBD$Dgen)
```

### Correlation btw PCA and barrier distances
```{r}
vegan::mantel(barrier_dist_mat, PCA_distance)
mantel_plot(barrier_dist_mat, PCA_distance)
```

## Excluding islanders
```{r}
lcwgs_IBD_islanders <- readRDS(
  file = here("output", "Embiotocidae_lcwgs_islanders_IBD.rds")
)
```

### Compute geographic barrier distance
```{r}
geo_dist_cells_islanders <- here_d_lcwgs("low_coverage_sampling.csv") |> 
  read_csv2(show_col_types = FALSE) |> 
  select(c(Code, Longitude, Latitude, Popmap)) |>
  rename(pop = Popmap) |> 
  filter(
    !pop %in% c("guadalupe_island", "catalina_island", "san_clemente_island")
  ) |> 
  mutate(
    pop  = as.factor(pop),
    Code = as.factor(Code)
  ) |>
  arrange(pop) |> 
  (\(x) mutate(x,
               cell_id = cellFromXY(water, as.matrix(x[, 2:3]))))() |> 
  pull(cell_id, name = pop)

barrier_dist_mat_islanders <- proxy::dist(geo_dist_cells_islanders,
                                          method = barrier_distance)

rm(water)
```

### Compute geographic euclidean distance
```{r}
Dist_geo_isl <- here_d_lcwgs("low_coverage_sampling.csv") |> 
  read_csv2(show_col_types = FALSE) |> 
  select(c(Code, Longitude, Latitude, Popmap)) |>
  rename(pop = Popmap) |> 
  arrange(pop) |> 
  filter(
    !pop %in% c("guadalupe_island", "catalina_island", "san_clemente_island")
  ) |>
  as.data.frame()

rownames(Dist_geo_isl) <- Dist_geo_isl$pop

Dist_geo_isl <- Dist_geo_isl[, 2:3] |> dist()
```

### Test if Euclidean and barrier geographic distances are different
```{r}
vegan::mantel(Dist_geo_isl, lcwgs_IBD_islanders$Dgeo)
```

### Correlation btw gl.ubd and barrier distances
```{r}
vegan::mantel(barrier_dist_mat_islanders, lcwgs_IBD_islanders$Dgen)
vegan::mantel(Dist_geo_isl, lcwgs_IBD_islanders$Dgen)

mantel_plot(barrier_dist_mat_islanders, lcwgs_IBD_islanders$Dgen)
```

### Correlation btw PCA and barrier distances

```{r}
pcadapt_lcwgs_coast <- read_rds(here("output", "pcadapt_lcwgs_coast.rds"))
popmap_lcwgs_coast <- c(
  rep("bodega_bay",            5), # BB
  rep("big_creek",            13), # BIGC -> BCR
  rep("elkhorn",               6), # ELK
  rep("pacific_grove",        13), # HOP -> Pacific Grove PGR
  rep("isla_san_jeronimo",    11), # ISJ
  rep("laguna_beach",         13), # LB
  rep("point_dume",            5), # PD
  rep("santa_barbara_island", 13), # SB
  rep("la_jolla_san_diego",   13), # SD
  rep("tomales_bay",           1), # TB
  rep("redondo_beach",        10), # RB
  rep("santa_cruz_harbour",   10)  # SCH
)
```

```{r}
PCA_distances_coast <- tibble(
  PCA1 = pcadapt_lcwgs_coast$scores[, 1],
  PCA2 = pcadapt_lcwgs_coast$scores[, 2],
  pop  = popmap_lcwgs_coast
) |> 
  group_by(pop) |> 
  summarise(
    PCA1_popmean = mean(PCA1),
    PCA2_popmean = mean(PCA2)
  ) |> 
  dist()

vegan::mantel(Dist_geo_isl, PCA_distances_coast)
vegan::mantel(barrier_dist_mat_islanders, PCA_distances_coast)

mantel_plot(Dist_geo_isl, PCA_distances_coast)
```